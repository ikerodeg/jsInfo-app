---
import MainLayout from "@/layouts/MainLayout.astro"
import Footer from "@/components/Footer.astro"
import LssnArt from "@/components/LssnArt.astro"
import ChaptrSect from "@/components/ChaptrSect.astro"
import ChaptrSubSect from "@/components/ChaptrSubSect.astro"
const ruta = '../../src/assets/img/'
---
<MainLayout>
  <LssnArt artClass="lssn__01b" h2Title="Document" slot="mainContent">
    <ChaptrSect h3Title="Entorno del navegador" codeText="">
      <ChaptrSubSect h4Title="Definici√≥n" codeText="">
        <p class="chaptrSubSect__p">Aqu√≠ tienes una vista general de lo que tenemos cuando JavaScript se ejecuta en un navegador web</p>
        <img class="chaptrSubSect__img" src=`${ruta}img0.webp` alt="Imagen del arbol DOM">
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li">Primero, es un objeto global para el c√≥digo JavaScript, como se describe en el cap√≠tulo Objeto Global.</li>
          <li class="chaptrSubSectUl__li">Segundo, representa la ‚Äúventana del navegador‚Äù y proporciona m√©todos para controlarla.</li>
        </ul>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="" codeText="DOM">
        <p class="chaptrSubSect__p">Document Object Model, o <span class="bttn">DOM</span>, representa todo el contenido de la p√°gina como objetos que pueden ser modificados. El objeto document es el punto de entrada a la p√°gina. Con √©l podemos cambiar o crear cualquier cosa en la p√°gina</p>
        <p class="chaptrSubSect__p"><strong>üõà</strong> <span class="bttn">DOM</span> <strong>no es solo para navegadores:</strong> La especificaci√≥n <span class="bttn">DOM</span> explica la estructura de un documento y proporciona objetos para manipularlo. Hay instrumentos que no son del navegador que tambi√©n usan <span class="bttn">DOM</span></p>
        <p class="chaptrSubSect__p"><strong>üõà</strong> <span class="bttn">CSSOM</span> <strong>para los estilos:</strong> Tambi√©n hay una especificaci√≥n separada, CSS Object Model o <span class="bttn">CSSOM</span> para las reglas y hojas de estilo CSS, que explica c√≥mo se representan como objetos y c√≥mo leerlos y escribirlos. <span class="bttn">CSSOM</span> se usa junto con <span class="bttn">DOM</span> cuando modificamos las reglas de estilo para el documento</p>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="" codeText="BOM">
        <p class="chaptrSubSect__p">El Modelo de Objetos del Navegador (Browser Object Model, BOM) son objetos adicionales proporcionados por el navegador (entorno host) para trabajar con todo excepto el documento</p>
        <p class="chaptrSubSect__p"><strong>üõà Especificaciones:</strong> <span class="bttn">BOM</span> es la parte general de la especificaci√≥n de HTML specification.</p>
      </ChaptrSubSect>
    </ChaptrSect>
    <ChaptrSect h3Title="El √°rbol de nodos üå≤" codeText="DOM">
      <ChaptrSubSect h4Title="Definici√≥n" codeText="">
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li">Cada documento HTML se representa internamente como un <mark>√°rbol de nodos</mark>.</li>
          <li class="chaptrSubSectUl__li">Las etiquetas HTML se convierten en <mark>nodos de elementos</mark>, mientras que el texto dentro de ellas se convierte en <mark>nodos de texto</mark>.</li>
          <li class="chaptrSubSectUl__li">Otros elementos como los comentarios tambi√©n forman parte del <span class="bttn">DOM</span>.</li>
        </ul>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Estructura b√°sica del" codeText="DOM">
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li"><strong>Ra√≠z del documento:</strong> Siempre comienza con el nodo <code>&lt;html&gt;</code>.</li>
          <li class="chaptrSubSectUl__li"><strong>Nodos hijos:</strong> <code>&lt;html&gt;</code> tiene como hijos a <code>&lt;head&gt;</code> y <code>&lt;body&gt;</code></li>
          <li class="chaptrSubSectUl__li"><strong>Nodos de texto:</strong> Contienen cadenas de texto y no tienen hijos.</li>
        </ul>
        <pre class="chaptrSubSect__console wScript">
          &lt;html&gt;
              ëóÖ-&lt;head&gt;
              ‚é¢      ‚àü&lt;title&gt;My Title&lt;/title&gt;
              ‚àü&lt;body&gt;</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Nodos especiales" codeText="">
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li">Los espacios en blanco y las l√≠neas nuevas tambi√©n se convierten en nodos de texto, pero los navegadores suelen ocultarlos en las herramientas de desarrollo para simplificar la visualizaci√≥n.</li>
          <li class="chaptrSubSectUl__li">Los comentarios se convierten en nodos de tipo <mark>#comment</mark> dentro del <span class="bttn">DOM</span>.</li>
        </ul>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Correcciones autom√°ticas del navegador" codeText="">
        <p class="chaptrSubSect__p">Los navegadores ajustan el <span class="bttn">DOM</span> autom√°ticamente si el HTML tiene errores</p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li">Agregan etiquetas faltantes como <code>&lt;html&gt;</code>, <code>&lt;body&gt;</code> o <code>&lt;tbody&gt;</code> en tablas.</li>
          <li class="chaptrSubSectUl__li">Cierran etiquetas mal formateadas.</li>
        </ul>
      </ChaptrSubSect>
    </ChaptrSect>
    <ChaptrSect h3Title="Recorriendo el" codeText="DOM">
      <ChaptrSubSect h4Title="Punto de entrada al" codeText="DOM">
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li"><code>document</code>: El objeto ra√≠z para todas las operaciones del <span class="bttn">DOM</span>. Desde √©l, accedemos a nodos espec√≠ficos del documento.</li>
        </ul>
        <img class="chaptrSubSect__img" src=`${ruta}img1.webp` alt="Imagen del arbol DOM">
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Acceso a nodos principales" codeText="">
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li"><code>document.documentElement</code>: Nodo <code>&lt;html&gt;</code>.</li>
          <li class="chaptrSubSectUl__li"><code>document.body</code>: Nodo <code>&lt;body&gt;</code>.</li>
          <li class="chaptrSubSectUl__li"><code>document.head</code>: Nodo <code>&lt;head&gt;</code>.</li>
        </ul>
        <p class="chaptrSubSect__p"><strong>Nota:</strong> Si el script se ejecuta antes de que el navegador lea el <code>&lt;body&gt;</code>, <code>document.body</code> ser√° <code>null</code>. Esto suele ocurrir cuando el script est√° en el <code>&lt;head&gt;</code> y no usa el evento <code>DOMContentLoaded</code>.</p>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Propiedades de navegaci√≥n b√°sica" codeText="">
        <p class="chaptrSubSect__p"><strong>Nodos hijos</strong></p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li"><code>childNodes</code>: Lista de todos los nodos hijos (incluidos nodos de texto y comentarios).</li>
          <li class="chaptrSubSectUl__li"><code>fistChild</code>: Primer nodo hijo.</li>
          <li class="chaptrSubSectUl__li"><code>lastChild</code>: √öltimo nodo hijo.</li>
        </ul>
        <p class="chaptrSubSect__p"><strong>Nodos hermanos</strong></p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li"><code>nextSibling</code>: Nodo hermano siguiente.</li>
          <li class="chaptrSubSectUl__li"><code>previousSibling</code>: Nodo hermano anterior.</li>
        </ul>
        <p class="chaptrSubSect__p"><strong>Nodo padre</strong></p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li"><code>parentNode</code>: Nodo padre del elemento.</li>
        </ul>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Navegaci√≥n s√≥lo por elementos" codeText="">
        <p class="chaptrSubSect__p">Para ignorar nodos de texto y comentarios, usamos estas propiedades espec√≠ficas de nodos elemento</p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li"><code>children</code>: Lista de hijos que son elementos.</li>
          <li class="chaptrSubSectUl__li"><code>fistElementChild</code>: Primer hijo elemento.</li>
          <li class="chaptrSubSectUl__li"><code>lastElementChild</code>: √öltimo hijo elemento.</li>
          <li class="chaptrSubSectUl__li"><code>nextElementSibling</code>: Elemento hermano siguiente.</li>
          <li class="chaptrSubSectUl__li"><code>previousElementSibling</code>: Elemento hermano anterior.</li>
          <li class="chaptrSubSectUl__li"><code>parentElement</code>: Padre que es elemento.</li>
        </ul>
        <img class="chaptrSubSect__img" src=`${ruta}img2.webp` alt="Imagen del arbol DOM">
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Caracter√≠sticas de las colecciones" codeText="DOM">
        <p class="chaptrSubSect__p">Similitudes con <span class="bttn">Arrays</span></p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li">Son los conocidos como <span class="bttn">array-like</span>.</li>
          <li class="chaptrSubSectUl__li">Tienen la propiedad <code>length</code>.</li>
          <li class="chaptrSubSectUl__li">Tienen √≠ndices num√©ricos.</li>
          <li class="chaptrSubSectUl__li">Son <mark>iterables</mark>, por lo que podemos usar <code>for..of</code>.</li>
          <li class="chaptrSubSectUl__li">No tienen m√©todos de array como <code>filter</code> o <code>map</code>.</li>
          <li class="chaptrSubSectUl__li">Para usar m√©todos de array, hay que convertirlos con <code>Array.from</code>.</li>
        </ul>
        <p class="chaptrSubSect__p">Son de s√≥lo lectura</p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li">No podemos modificar directamente las colecciones, solo reflejan el estado actual del DOM.</li>
        </ul>
        <p class="chaptrSubSect__p">Colecciones vivas</p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li">Los cambios en el DOM se reflejan autom√°ticamente en las colecciones.</li>
        </ul>
      </ChaptrSubSect>
    </ChaptrSect>
    <ChaptrSect h3Title="Propiedades del nodo" codeText="DOM">
      <ChaptrSubSect h4Title="Clases de nodo" codeText="DOM">
        <p class="chaptrSubSect__p">Cada nodo <span class="bttn">DOM</span> pertenece a la clase nativa correspondiente. La ra√≠z de la jerarqu√≠a es <code>EventTarget</code>, que es heredada por <code>Node</code>, y otros nodos <span class="bttn">DOM</span> heredan de √©l</p>
        <img class="chaptrSubSect__img" src=`${ruta}img3.webp` alt="Imagen del arbol DOM">
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li"><code>EventTarget</code>: es la clase ra√≠z ‚Äúabstracta‚Äù. Los objetos de esta clase nunca se crean. Sirve como base, es por la que todos los nodos DOM soportan los llamados ‚Äúeventos‚Äù que estudiaremos m√°s adelante.</li>
          <li class="chaptrSubSectUl__li"><code>Node</code>: tambi√©n es una clase ‚Äúabstracta‚Äù, sirve como base para los nodos DOM.</li>
          <li class="chaptrSubSectUl__li"><code>Document</code>: por razones hist√≥ricas, heredado a menudo por HTMLDocument, es el documento como un todo.</li>
          <li class="chaptrSubSectUl__li"><code>CharacterData</code>: una clase ‚Äúabstract‚Äù heredada por:</li>
          <ul class="chaptrSubSect__ul">
            <li class="chaptrSubSectUl__li"><code>Text</code>: la clase correspondiente a texto dentro de los elementos.</li>
            <li class="chaptrSubSectUl__li"><code>Comment</code>: la clase para los ‚Äúcomentarios‚Äù. No se muestran, pero cada comentario se vuelve un miembro del DOM.</li>
          </ul>
          <li class="chaptrSubSectUl__li"><code>Element</code>: es una clase base para elementos DOM. Proporciona navegaci√≥n a nivel de elemento.</li>
          <li class="chaptrSubSectUl__li"><code>HTMLElement</code>: es la clase b√°sica para todos los elementos HTML. Trabajaremos con ella la mayor parte del tiempo.</li>
        </ul>
        <p class="chaptrSubSect__p">Los nodos DOM son objetos regulares de JavaScript. Usan clases basadas en prototipos para la herencia y podemos ver el nombre de la clase del nodo DOM</p>
        <pre class="chaptrSubSect__console wScript">
          console.log(document.body.constructor.¬∫name);
          ‚ãó ‚àûHTMLBodyElement

          alert(document.body);
          ‚ãó /¬∫[ object HTMLBodyElement ]¬∫/

          console.log(document.body instanceof HTMLBodyElement);
          ‚ãó ‚àûtrue
        </pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Propiedades comunes" codeText="">
        <p class="chaptrSubSect__p"><code>nodeType</code>, tipo de nodo que nos indica el tipo de nodo con un n√∫mero</p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li"><code>1</code>: Nodo de elemento (HTML/XML).</li>
          <li class="chaptrSubSectUl__li"><code>3</code>: Nodo de texto.</li>
          <li class="chaptrSubSectUl__li"><code>8</code>: Nodo de comentario.</li>
          <li class="chaptrSubSectUl__li"><code>9</code>: Nodo de documento.</li>
        </ul>
        <pre class="chaptrSubSect__console wScript">
          let ¬∑elem = document.body;
          console.log(¬∑elem.¬∫nodeType);  ‚ãó ‚àû1         /* Elemento */
          console.log(document.¬∫nodeType);  ‚ãó ‚àû9      /* Documento */</pre>

        <p class="chaptrSubSect__p"><code>nodeName</code> nombre de nodo (aplica a cualquier tipo de nodo) y <code>tagName</code> nombre de etiqueta (solo para nodos de tipo <code>Element</code>)</p>
        <pre class="chaptrSubSect__console wScript">
          console.log(document.body.¬∫tagName);  ‚ãó ‚àûBODY
          console.log(document.body.¬∫nodeName);  ‚ãó ‚àûBODY</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Propiedades de contenido" codeText="">
        <p class="chaptrSubSect__p">‚ú¥Ô∏è <code>innerHTML</code>: Contenido HTML del Nodo que permite leer o modificar el contenido HTML dentro de un elemento</p>
        <pre class="chaptrSubSect__console wScript">
          let ¬∑myDiv = document.querySelector('div');
          console.log(¬∑myDiv.¬∫innerHTML);  ‚ãó /¬∫&lt;p&gt;Texto mio&lt;/p&gt;¬∫/
          ¬∑myDiv.¬∫innerHTML = '/¬∫&lt;b&gt;Nuevo texto&lt;/b&gt;¬∫/'</pre>
        <p class="chaptrSubSect__p">‚ö†Ô∏è Advertencia: Usar <code>+=</code> con innerHTML sobrescribe el contenido completo y puede recargar recursos innecesariamente</p>
        <p class="chaptrSubSect__p">‚ú¥Ô∏è <code>outerHTML</code>: HTML Completo del Nodo que incluye el nodo en s√≠ mismo m√°s su contenido</p>
        <pre class="chaptrSubSect__console wScript">
          let ¬∑myDiv = document.querySelector('div');
          console.log(¬∑myDiv.¬∫outerHTML);  ‚ãó /¬∫&lt;div&gt;&lt;p&gt;Texto mio&lt;/p&gt;&lt;/div&gt;¬∫/</pre>

        <p class="chaptrSubSect__p">‚ú¥Ô∏è <code>textContent</code>: Texto Puro devuelve el texto dentro del nodo, ignorando las etiquetas HTML</p>
        <pre class="chaptrSubSect__console wScript">
          let ¬∑news = document.querySelector('#news');
          console.log(¬∑news.¬∫textContent);  ‚ãó /¬∫¬°Baja el IVA!¬∫/</pre>

        <p class="chaptrSubSect__p">‚ú¥Ô∏è <code>nodeValue</code> y <code>data</code>: Aplica solo a nodos de texto y comentarios. Devuelven o establecen el contenido directamente</p>
        <pre class="chaptrSubSect__console wScript">
          let ¬∑textNode = document.body.¬∫firstChild;
          console.log(¬∑textNode.¬∫data);  ‚ãó /¬∫ Texto dentro del nodo ¬∫/</pre>

        <p class="chaptrSubSect__p">‚ú¥Ô∏è <code>hidden</code> para ocultar o mostrar elementos</p>
        <pre class="chaptrSubSect__console wScript">
          let ¬∑elem = document.querySelector('div');
          ¬∑elem.¬∫hidden = true;
          ¬∑elem.¬∫hidden = false;
        </pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Trabajando con Nodos" codeText="">
        <p class="chaptrSubSect__p">Uso de <code>instanceof</code> con el que podemos verificar el tipo de nodo </p>
        <pre class="chaptrSubSect__console wScript">
          console.log(document.body instanceof HTMLElement);  ‚ãó /¬∫true¬∫/
          console.log(document.body instanceof Node);  ‚ãó /¬∫true¬∫/</pre>
        <p class="chaptrSubSect__p">‚ú¥Ô∏è Inspecci√≥n en consola</p>
        <pre class="chaptrSubSect__console wScript">
          console.log(¬∑elem);  ‚ãó /¬∫ Muestra el elemento en el √°rbol DOM ¬∫/
          console.@dir(¬∑elem);  ‚ãó /¬∫ Muestra el elemento como un objeto ¬∫/</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Resumen visual" codeText="">
        <img class="chaptrSubSect__img" src=`${ruta}domTree.jpg` alt="Imagen del arbol DOM">
      </ChaptrSubSect>
    </ChaptrSect>
    <ChaptrSect h3Title="M√©todos del objeto" codeText="window">
      <ChaptrSubSect h4Title="Manipulacion de tiempo" codeText="">
        <p class="chaptrSubSect__p"><code>setTimeout():</code> Ejecuta una funci√≥n despu√©s de un retraso especificado</p>
        <pre class="chaptrSubSect__console wScript">
          @setTimeout(() =&gt; console.log('Hola'), ¬¨1000); 
          ‚ãó ‚àûHola</pre>
        <p class="chaptrSubSect__p"><code>clearTimeout():</code> Cancela un temporizador creado con <code>setTimeout():</code></p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑timer = @setTimeout(() =&gt; console.log('Hola'), ¬¨1000);
          @clearTimeout(¬∑timer);</pre>
        <p class="chaptrSubSect__p"><code>setInterval():</code> Ejecuta repetidamente una funci√≥n con un intervalo de tiempo</p>
        <pre class="chaptrSubSect__console wScript">
          @setInterval(() =&gt; console.log('Tick'), ¬¨1000);
          ‚ãó ‚àûTick   ‚ãó ‚àûTick   ‚ãó ‚àûTick   ‚ãó ‚àûTick...</pre>
        <p class="chaptrSubSect__p"><code>clearInterval():</code> Detiene la ejecuci√≥n repetida iniciada con <code>setInterval()</code></p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑interval = @setInterval(() =&gt; console.log('Tick'), ¬¨1000);
          @clearInterval(¬∑interval);</pre>
        <p class="chaptrSubSect__p"><code>requestAnimationFrame():</code> Solicita una animaci√≥n y llama a una funci√≥n antes del siguiente redibujo</p>
        <pre class="chaptrSubSect__console wScript">
          function @animate() &#123;
            console.log('Frame');
            @requestAnimationFrame(‚Ä¢animate);
          &#125;;
          @requestAnimationFrame(‚Ä¢animate);</pre>
        <p class="chaptrSubSect__p"><code>cancelAnimationFrame():</code> Cancela una animaci√≥n programada con <code>requestAnimationFrame()</code></p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑animation = @requestAnimationFrame(() =&gt; console.log('Frame'));
          @cancelAnimationFrame(¬∑animation);</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Navegaci√≥n y localizaci√≥n" codeText="">
        <p class="chaptrSubSect__p"><code>open():</code> Abre una nueva ventana o pesta√±a</p>
        <pre class="chaptrSubSect__console wScript">
          √ßwindow.@open('https://google.es', '_blank');</pre>
        <p class="chaptrSubSect__p"><code>close():</code> Cierra la ventana actual si fue abierta con <code>window.open()</code></p>
        <pre class="chaptrSubSect__console wScript">
          √ßwindow.@close();</pre>
        <p class="chaptrSubSect__p"><span class="tooltip" title="Compartido con Element">üôèüèª</span><code>scrollTo():</code> Desplaza la ventana al punto especificado</p>
        <pre class="chaptrSubSect__console wScript">
          √ßwindow.@scrollTo(¬¨0, ¬¨100);</pre>
        <p class="chaptrSubSect__p"><span class="tooltip" title="Compartido con Element">üôèüèª</span><code>scrollBy():</code> Desplaza la ventana relativo a su posici√≥n actual</p>
        <pre class="chaptrSubSect__console wScript">
          √ßwindow.@scrollBy(¬¨0, ¬¨50);</pre>
        <p class="chaptrSubSect__p"><span class="tooltip" title="Compartido con Element">üôèüèª</span><code>focus():</code> Da enfoque a la ventana</p>
        <pre class="chaptrSubSect__console wScript">
          √ßwindow.@focus();</pre>
        <p class="chaptrSubSect__p"><span class="tooltip" title="Compartido con Element">üôèüèª</span><code>blur():</code> Quita el enfoque de la ventana</p>
        <pre class="chaptrSubSect__console wScript">
          √ßwindow.@blur();</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Almacenamiento y navegador" codeText="">
        <p class="chaptrSubSect__p"><code>localStorage:</code> Almacena datos persistentes en el navegador</p>
        <pre class="chaptrSubSect__console wScript">
          √ßlocalStorage.@setItem('nombre', '√âder');
          console.log(√ßlocalStorage.@getItem('nombre'))
          ‚ãó √âder</pre>
        <p class="chaptrSubSect__p"><code>sessionStorage:</code> Almacena datos solo durante la sesi√≥n actual</p>
        <pre class="chaptrSubSect__console wScript">
          √ßsessionStorage.@setItem('edad', ¬¨4);
          console.log(√ßsessionStorage.@getItem('edad'))
          ‚ãó 4</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Mensajes y di√°logos" codeText="">
        <p class="chaptrSubSect__p"><code>alert():</code> Muestra un cuadro de di√°logo con un mensaje y un bot√≥n "Aceptar"</p>
        <pre class="chaptrSubSect__console wScript">
          alert('Hola √âder');</pre>
        <p class="chaptrSubSect__p"><code>confirm():</code> Muestra un cuadro de di√°logo con opciones "Aceptar" y "Cancelar". Devuelve <span class="bttn">boolean</span></p>
        <pre class="chaptrSubSect__console wScript">
          confirm('/¬∫ ¬øAceptas? ¬∫/');</pre>
        <p class="chaptrSubSect__p"><code>prompt():</code> Muestra un cuadro de di√°logo que permite al usuario ingresar texto</p>
        <pre class="chaptrSubSect__console wScript">
          prompt('Introduce tu nombre');</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Consola" codeText="">
        <p class="chaptrSubSect__p"><code>console.log():</code> Imprime un mensaje en la consola</p>
        <pre class="chaptrSubSect__console wScript">
          console.log('/¬∫ Hola, √âder! ¬∫/');
          ‚ãó /¬∫ Hola √âder! ¬∫/</pre>
        <p class="chaptrSubSect__p"><code>console.error():</code> Imprime un mensaje de error en la consola</p>
        <pre class="chaptrSubSect__console wScript">
          console.¬™error('/¬∫ error: algo sali√≥ mal ¬∫/');
          üÖß ‚ãó /¬∫ error: algo sali√≥ mal ¬∫/</pre>
        <p class="chaptrSubSect__p"><code>console.warn():</code> Imprime un mensaje de advertencia en la consola</p>
        <pre class="chaptrSubSect__console wScript">
          console.warn('slow network detected');
          ‚ö†Ô∏è ‚ãó slow network detected</pre>
        <p class="chaptrSubSect__p"><code>console.info():</code> Imprime un mensaje informativo en la consola</p>
        <pre class="chaptrSubSect__console wScript">
          console.¬™info('/¬∫ Compilaci√≥n exitosa! ¬∫/');
          ‚ìò ‚ãó /¬∫ Compilaci√≥n exitosa! ¬∫/</pre>
        <p class="chaptrSubSect__p"><code>console.debug():</code> Imprime un mensaje de depuraci√≥n en la consola</p>
        <pre class="chaptrSubSect__console wScript">
          console.debug('/¬∫ depurando... ¬∫/');
          /¬∫ depurando... ¬∫/</pre>
        <p class="chaptrSubSect__p"><code>console.clear():</code> Limpia la consola</p>
        <pre class="chaptrSubSect__console wScript">
          console.¬™clear();</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Red y Datos" codeText="">
        <p class="chaptrSubSect__p"><code>fetch():</code> Realiza solicitudes HTTP</p>
        <pre class="chaptrSubSect__console wScript">
          fetch('https://api.example.com/data')
              .then(√ßresponse =&gt; √ßresponse.¬™json())
              .then(√ßdata =&gt; console.log(√ßdata));</pre>
        <p class="chaptrSubSect__p"><code>XMLHRequest():</code> Realiza solicitudes HTTP (deprecado)</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑xhr = new XMLHttpRequest();
          ¬∑xhr.¬™open('GET', 'https://api.example.com/data', true);
          ¬∑xhr.¬™onload = () =&gt; console.log(¬∑xhr.‚Ä¢responseText);
          ¬∑xhr.¬™send();</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Im√°genes y Multimedia" codeText="">
        <p class="chaptrSubSect__p"><code>createImageBitmap():</code> Crea un mapa de bits a partir de una imagen para su uso en canvas</p>
        <pre class="chaptrSubSect__console wScript">
          fetch('imagen.png')
              .then(√ßresponse =&gt; √ßresponse.¬™blob())
              .then(√ßblob =&gt; @createImageBitmap(√ßblob))
              .then(√ßbitmap =&gt; console.log(√ßbitmap));</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Medios de consulta" codeText="">
        <p class="chaptrSubSect__p"><code>matchMedia():</code> Eval√∫a una consulta de medios (√∫til para dise√±o responsivo)</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑mediaQuery = √ßwindow.¬™matchMedia('/¬∫ (max-width: 600px) ¬∫/');
          console.log(¬∑mediaQuery.matches);
          ‚ãó /¬∫ true ¬∫/</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Codificaci√≥n/Decodificaci√≥n" codeText="">
        <p class="chaptrSubSect__p"><code>btoa():</code> Codifica una cadena en Base64</p>
        <pre class="chaptrSubSect__console wScript">
          console.log(@btoa('Hola'));
          ‚ãó /¬∫ SG9sYQ== ¬∫/</pre>
        <p class="chaptrSubSect__p"><code>atob():</code> Decodifica una cadena codificada en Base64</p>
        <pre class="chaptrSubSect__console wScript">
          console.log(@atob('/¬∫ SG9sYQ== ¬∫/'));
          ‚ãó Hola</pre>
        <p class="chaptrSubSect__p"><code>encodeURI():</code> Codifica una URI completa</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑uriEncoded = @encodeURI('/¬∫ https://example.com/?q=Hola mundo' ¬∫/));
          // Codifica espacios</pre>
        <p class="chaptrSubSect__p"><code>encodeURIComponent():</code> Codifica una parte de una URI (como par√°metros)</p>
        <pre class="chaptrSubSect__console wScript">
          console.log(@encodeURIComponent('Hola mundo'));
          ‚ãó Hola%20mundo</pre>
        <p class="chaptrSubSect__p"><code>decodeURI():</code> Decodifica una URI completa</p>
        <pre class="chaptrSubSect__console wScript">
          console.log(@decodeURI('/¬∫ https://example.com/?q=Hola%20mundo ¬∫/'));
          ‚ãó Hola mundo</pre>
        <p class="chaptrSubSect__p"><code>decodeURIComponent:</code> Decodifica una parte de una URI</p>
        <pre class="chaptrSubSect__console wScript">
          console.log(@decodeURIComponent('Hola%20mundo'));
          ‚ãó Hola mundo</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Conversiones Num√©ricas" codeText="">
        <p class="chaptrSubSect__p"><code>parseFloat():</code> Convierte una cadena en un n√∫mero de punto flotante</p>
        <pre class="chaptrSubSect__console wScript">
          console.log(parseFloat('123.45'));
          ‚ãó /¬∫ 123.45 ¬∫/</pre>
        <p class="chaptrSubSect__p"><code>parseInt():</code> Convierte una cadena en un n√∫mero entero</p>
        <pre class="chaptrSubSect__console wScript">
          console.log(parseInt('123'));
          ‚ãó 123</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Geolocalizaci√≥n" codeText="">
        <p class="chaptrSubSect__p"><code>navigator.geolocation.getCurrentPosition():</code> </p>
        <pre class="chaptrSubSect__console wScript">
          √ßnavigator.‚Ä¢geolocation.¬™getCurrentPosition(¬∑pos =&gt; console.log(¬∑pos.‚Ä¢coords));
          ‚ãó GeolocationCoordinates /¬∫ &#123;...&#125; ¬∫/</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Notificaciones" codeText="">
        <p class="chaptrSubSect__p"><code>Notification.requestPermission():</code> Solicita permiso para mostrar notificaciones</p>
        <pre class="chaptrSubSect__console wScript">
          √ßNotification.¬™requestPermission()
            .then(¬∑permission =&gt; console.log(¬∑permission));</pre>
        <p class="chaptrSubSect__p"><code>new Notification():</code> Crea y muestra una notificaci√≥n</p>
        <pre class="chaptrSubSect__console wScript">
          new @Notification('T√≠tulo', &#123; body: 'Este es el cuerpo' &#125;);</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Historial del Navegador" codeText="">
        <p class="chaptrSubSect__p"><code>history.pushState():</code> Agrega un nuevo estado al historial sin recargar la p√°gina</p>
        <pre class="chaptrSubSect__console wScript">
          √ßhistory.¬™pushState(&#123; page: ¬¨1&#125;, 'T√≠tulo', '/¬∫ /nueva-pagina ¬∫/');</pre>
        <p class="chaptrSubSect__p"><code>history.back():</code> Retrocede en el historial del navegador</p>
        <pre class="chaptrSubSect__console wScript">
          √ßhistory.¬™back();</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Informaci√≥n del Navegador" codeText="">
        <p class="chaptrSubSect__p"><code>navigator.userAgent():</code> Devuelve informaci√≥n sobre el navegador.</p>
        <pre class="chaptrSubSect__console wScript">
          console.log(√ßnavigator.‚Ä¢userAgent);
          ‚ãó Chrome</pre>
        <p class="chaptrSubSect__p"><code>navigator.onLine():</code> Indica si el dispositivo est√° conectado a internet</p>
        <pre class="chaptrSubSect__console wScript">
          console.log(√ßnavigator.‚Ä¢onLine);
          ‚ãó /¬∫ true ¬∫/</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Informaci√≥n de la Pantalla" codeText="">
        <p class="chaptrSubSect__p"><code>screen.width():</code> DAncho de la pantalla en p√≠xeles</p>
        <pre class="chaptrSubSect__console wScript">
          console.log(√ßscreen.‚Ä¢width);
          ‚ãó 1280</pre>
        <p class="chaptrSubSect__p"><code>screen.height():</code> Alto de la pantalla en p√≠xeles</p>
        <pre class="chaptrSubSect__console wScript">
          console.log(√ßscreen.‚Ä¢height);
          ‚ãó 1024</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Web Storage Avanzado" codeText="">
        <p class="chaptrSubSect__p"><code>indexedDB:</code> API para almacenamiento de datos estructurados en el navegador</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑request = √ßindexedDB.¬™open('miDB', ¬¨1);
          √ßrequest.‚Ä¢onsuccess = () =&gt; console.log('Base de datos abierta');</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Ubicaci√≥n" codeText="">
        <p class="chaptrSubSect__p"><code>location.href:</code> Obtiene o establece la URL actual</p>
        <pre class="chaptrSubSect__console wScript">
          console.log(√ßlocation.‚Ä¢href); /*URL actual */
          √ßlocation.‚Ä¢href = '/¬∫ https://example.com ¬∫/'; /* Cambia la p√°gina */</pre>
        <p class="chaptrSubSect__p"><code>location.assign():</code> Carga una nueva p√°gina</p>
        <pre class="chaptrSubSect__console wScript">
          √ßlocation.¬™assign('/¬∫ https://example.com ¬∫/');</pre>
        <p class="chaptrSubSect__p"><code>location.reload():</code> Recarga la p√°gina actual</p>
        <pre class="chaptrSubSect__console wScript">
          √ßlocation.¬™reload();</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Depuraci√≥n" codeText="">
        <p class="chaptrSubSect__p"><code>debugger:</code> Interrumpe la ejecuci√≥n del c√≥digo para depuraci√≥n</p>
        <pre class="chaptrSubSect__console wScript">
          debugger; /* Pausa aqu√≠ en modo desarrollo */</pre>
      </ChaptrSubSect>
    </ChaptrSect>
    <ChaptrSect h3Title="M√©todos del objeto" codeText="document">
      <ChaptrSubSect h4Title="Captura de elementos" codeText="">
        <p class="chaptrSubSect__p"><span class="tooltip" title="Compartido con Element">üôèüèª</span><span class="tooltip" title="Aconsejado por su flexibilidad con selectores CSS">üü¢</span><code>.querySelector()</code> Busca el <mark>primer elemento</mark> que coincida con un <strong>selector CSS</strong></p>
        <pre class="chaptrSubSect__console wScript">
          let ¬∑elem = document.querySelector('/¬∫ .main_tittle ¬∫/');
          ¬∑elem.¬∫style.¬∫color = 'red';</pre>
        <p class="chaptrSubSect__p"><span class="tooltip" title="Compartido con Element">üôèüèª</span><span class="tooltip" title="Aconsejado por su flexibilidad con selectores CSS">üü¢</span><code>.querySelectorAll()</code> Devuelve <mark>todos</mark> los elementos que coincidan con un <strong>selector CSS</strong>, en una colecci√≥n est√°tica (NO refleja cambios en el DOM despu√©s de su llamada)</p>
        <pre class="chaptrSubSect__console wScript">
          let ¬∑elems = document.querySelectorAll('/¬∫ .lesson_h2 ¬∫/');
          ¬∑elems.forEach( ¬∑elem =&gt; &#123;
            ¬∑elem.¬∫style.¬∫color = 'blue';
          &#125;);</pre>
        <p class="chaptrSubSect__p"><span class="tooltip" title="v√°lido, pero no recomendado para proyectos complejos, solo funciona con id √∫nicos">üü°</span> <code>.getElementById()</code> Busca un <mark><strong>√∫nico</strong></mark> elemento en el documento por su atributo <strong>id</strong></p>
        <pre class="chaptrSubSect__console wScript">
          let ¬∑elem = document.getElementById('/¬∫ main_tittle ¬∫/');
          ¬∑elem.¬∫style.¬∫color = 'red';</pre>
        <p class="chaptrSubSect__p"><span class="tooltip" title="Obsoleto pero funcional. Usar .querySelectorAll es m√°s moderno y potente.">üî¥</span><code>.getElementByTagName(tagName)</code> Devuelve <mark>todos</mark> los elementos con una etiqueta espec√≠fica, en una colecci√≥n viva (refleja cambios en el DOM autom√°ticamente)</p>
        <pre class="chaptrSubSect__console wScript">
          let ¬∑paragraphs = document.getElementByTagName('p');
          for (let #para of ¬∑paragraphs) &#123;
            #para.¬∫style.¬∫fontSize = '1rem';
          &#125;;</pre>
          <p class="chaptrSubSect__p"><span class="tooltip" title="Funcional, pero desaconsejado. Mejor usar .querySelectorAll">üî¥</span><code>getElementsByTagNameNS()</code> Devuelve una colecci√≥n en vivo (HTMLCollection) de elementos que coincidan con una etiqueta espec√≠fica en un espacio de nombres determinado</p>
          <pre class="chaptrSubSect__console wScript">
            const svgElements = document.
                getElementsByTagNameNS('http://www.w3.org/2000/svg', 'circle');
            svgElements[0].setAttribute('fill', 'red'); 
            /* Cambia el relleno del primer &lt;circle&gt; en SVG */</pre>
        <p class="chaptrSubSect__p"><span class="tooltip" title="Funcional, pero desaconsejado. Mejor usar .querySelectorAll">üî¥</span> <code>.getElementByClassName(className)</code> Busca <mark>todos</mark> los elementos que tengan una clase espec√≠fica, devolviendo una colecci√≥n viva</p>
        <pre class="chaptrSubSect__console wScript">
          let ¬∑elems = document.getElementByClassName('/¬∫ .article_h2 ¬∫/');
          for (let #elem of ¬∑elems) &#123;
            #elem.¬∫style.¬∫fontSize = '2rem';
          &#125;;</pre>
        <p class="chaptrSubSect__p"><span class="tooltip" title="Poco usado, se considera antiguo">üî¥</span> <code>.getElementsByName(name)</code> Devuelve elementos con un atributo name espec√≠fico</p>
        <pre class="chaptrSubSect__console wScript">
          let ¬∑inputs = document.getElementsByName('username');
            ¬∑inputs[¬¨0].¬∫value = 'Iker';
          &#125;;</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Creaci√≥n de elementos" codeText="">
        <p class="chaptrSubSect__p"><code>.createElement(tagName, [options])</code> Crea un nuevo nodo de texto. Este m√©todo puede ser usado para escapar caracteres HTML</p>
        <pre class="chaptrSubSect__console wScript">
          let ¬∑elem = document.createElement('div');</pre>
        <p class="chaptrSubSect__p"><code>.createTextNode(text)</code> crea un elemento HTML especificado por su tagName</p>
        <pre class="chaptrSubSect__console wScript">
          let ¬∑elem = document.createTextNode('Ola q tal');</pre>
        <p class="chaptrSubSect__p"><code>.createComment(text)</code> crea un nodo de comentario y lo devuelve</p>
        <pre class="chaptrSubSect__console wScript">
          let ¬∑elem = document.createComment('Esto es un comentario');</pre>
        <p class="chaptrSubSect__p"><code>DocumentFragment()</code> es un nodo <span class="bttn">DOM</span> especial que sirve como contenedor para trasladar listas de nodos. Podemos agregarle nodos, pero cuando lo insertamos en alg√∫n lugar, lo que se inserta es su contenido</p>
        <pre class="chaptrSubSect__console wScript">
          let ¬∑oneFragment = new DocumentFragment();</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Combinaci√≥n" codeText="">
        <p class="chaptrSubSect__p"><code>normalize():</code> Combina nodos de texto adyacentes en un √∫nico nodo</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑div = document.createElement('div');
          ¬∑div.appendChild(document.createTextNode('Hola'));
          ¬∑div.appendChild(document.createTextNode(' mundo'));
          ¬∑div.¬™normalize(); /* Combina "Hola" y " mundo" en un solo nodo de texto */
          console.log(¬∑div.‚Ä¢childNodes.length);
          ‚ãó 1
        </pre>
      </ChaptrSubSect>
    </ChaptrSect>
    <ChaptrSect h3Title="M√©todos del objeto" codeText="Node">
      <ChaptrSubSect h4Title="Gestion de la jerarquia del" codeText="DOM">
        <p class="chaptrSubSect__p"><code>appendChild():</code> Agrega un nodo como hijo al final de la lista de hijos de un nodo</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑myDiv = document.createElement('div');
          document.body.appendChild(¬∑myDiv);</pre>
        <p class="chaptrSubSect__p"><code>isertBefore():</code> Inserta un nodo antes de un nodo de referencia en la lista de hijos</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑nuevoDiv = document.createElement('div');
          const ¬∑primerHijo = document.body.‚Ä¢firstElementChild;
          document.body.¬™insertBefore(¬∑nuevoDiv, ¬∑primerHijo);</pre>
        <p class="chaptrSubSect__p"><code>removeChild():</code> Elimina un nodo hijo de un nodo padre</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑myDiv = document.querySelector('div');
          document.body.¬™removeChild(¬∑myDiv);</pre>
        <p class="chaptrSubSect__p"><code>replaceChild():</code> Reemplaza un nodo hijo existente con otro nodo</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑nuevoDiv = document.createElement('div');
          const ¬∑viejoDiv = document.querySelector('div');
          document.body.¬™replaceChild(¬∑nuevoDiv, ¬∑viejoDiv);</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Inspecci√≥n de nodos y relaciones jer√°rquicas" codeText="">
        <p class="chaptrSubSect__p"><code>compareDocumentPosition():</code> Compara la posici√≥n de dos nodos en el documento</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑div1 = document.querySelector('#div1');
          const ¬∑div2 = document.querySelector('#div2');
          console.log(¬∑div1.¬™compareDocumentPosition(¬∑div2));</pre>
        <p class="chaptrSubSect__p"><code>contains():</code> Verifica si un nodo contiene a otro nodo como descendiente</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑parent = document.body;
          const ¬∑child = document.querySelector('p');
          console.log(¬∑parent.¬™contains(¬∑child));
          ‚ãó /¬∫ true ¬∫/</pre>
        <p class="chaptrSubSect__p"><code>getRootNode():</code> Devuelve la ra√≠z del nodo (por ejemplo, el documento)</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑elemento = document.querySelector('p');
          console.log(¬∑elemento.¬™getRootNode() === document);
          ‚ãó /¬∫ true ¬∫/</pre>
        <p class="chaptrSubSect__p"><code>hasChildNodes():</code> Verifica si un nodo tiene nodos hijos</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑div = document.querySelector('div');
          console.log(¬∑div.¬™hasChildNodes());
          ‚ãó /¬∫ true ¬∫/</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Identidad y comparaci√≥n de nodos" codeText="">
        <p class="chaptrSubSect__p"><code>isEqualNode():</code> Compara si dos nodos son iguales en t√©rminos de estructura y contenido</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑div1 = document.createElement('div');
          const ¬∑div2 = document.createElement('div');
          console.log(¬∑div1.¬™isEqualNode(¬∑div2));
          ‚ãó /¬∫ true ¬∫/</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Espacios de nombres" codeText="">
        <p class="chaptrSubSect__p"><code>isDefaultNamespace():</code> Verifica si un espacio de nombres es el predeterminado para un nodo</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑svg = document.querySelector('svg');
          console.log(¬∑svg.¬™isDefaultNamespace('/¬∫ http://www.w3.org/2000/svg ¬∫/'));
          ‚ãó /¬∫ true ¬∫/</pre>
        <p class="chaptrSubSect__p"><code>lookupNamespaceURI():</code> Busca el URI del espacio de nombres asociado con un prefijo dado</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑svg = document.querySelector('svg');
          console.log(¬∑svg.¬™lookupNamespaceURI('svg'));
          ‚ãó /¬∫ http://www.w3.org/2000/svg ¬∫/</pre>
        <p class="chaptrSubSect__p"><code>lookupPrefix():</code> Busca el prefijo asociado con un URI de espacio de nombres dado</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑svg = document.querySelector('svg');
          console.log(¬∑svg.¬™lookupPrefix('/¬∫ http://www.w3.org/2000/svg ¬∫/'));
          ‚ãó svg</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Clonaci√≥n y normalizaci√≥n" codeText="">
        <p class="chaptrSubSect__p"><code>cloneNode():</code> Crea una copia superficial o profunda de un nodo</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑div = document.querySelector('div');
          const ¬∑clon = ¬∑div.¬™cloneNode(true); /* Clona profundamente */
          document.body.appendChild(¬∑clon);</pre>
        <p class="chaptrSubSect__p"><code>normalize():</code> Combina nodos de texto adyacentes en un √∫nico nodo</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑div = document.createElement('div');
          ¬∑div.appendChild(document.createTextNode('Hola'));
          ¬∑div.appendChild(document.createTextNode(' mundo'));
          ¬∑div.¬™normalize(); /* Combina "Hola" y " mundo" en un solo nodo de texto */
          console.log(¬∑div.‚Ä¢childNodes.length);
          ‚ãó 1
        </pre>
      </ChaptrSubSect>
    </ChaptrSect>
    <ChaptrSect h3Title="M√©todos del objeto" codeText="Element">
      <ChaptrSubSect h4Title="A√±adir/eliminar/reemplazar elementos" codeText="">
        <p class="chaptrSubSect__p"><span class="tooltip" title="Compartido con DocumentFragment">üôèüèª</span><span class="tooltip" title="Obsoleto pero funcional. Usar .append() es m√°s moderno y potente.">üî¥</span><code>.appendChild()</code>Agrega un SOLO nodo hijo al final de un elemento padre</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑myDiv = document.querySelector('div');
          const ¬∑newP = document.createElement('p');
          ¬∑myDiv.¬™appendChild(¬∑newP);</pre>
        <p class="chaptrSubSect__p"><span class="tooltip" title="Compartido con DocumentFragment">üôèüèª</span><code>.append()</code> Es utilizado para a√±adir MULTIPLES nodos o cadenas de texto al final de un nodo</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑myDiv = document.querySelector('div');
          ¬∑myDiv.¬™append('Texto final', document.createElement('p'));</pre>
        <p class="chaptrSubSect__p"><span class="tooltip" title="Compartido con DocumentFragment">üôèüèª</span><code>.replaceChildren()</code> Reemplaza los hijos existentes de <span class="bttn">Document</span> por un nuevo grupo de hijos espec√≠ficos</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑myDiv = document.querySelector('div');
          ¬∑myDiv.¬™replaceChildren('Nuevo texto', document.createElement('p'));</pre>
        <p class="chaptrSubSect__p"><span class="tooltip" title="Compartido con DocumentFragment">üôèüèª</span><code>prepend()</code> Agrega nodos o cadenas de texto al inicio de un nodo</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑myDiv = document.querySelector('div');
          ¬∑myDiv.¬™prepend('Texto inicial', document.createElement('p'));</pre>
        <p class="chaptrSubSect__p"><code>after()</code> Inserta nodos o cadenas de texto inmediatamente despu√©s del nodo actual en el mismo nivel (hermano siguiente)</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑myParag = document.querySelector('p');
          ¬∑myParag.¬™after('Texto despu√©s', document.createElement('span'));</pre>
        <p class="chaptrSubSect__p"><code>before()</code> Inserta nodos o cadenas de texto inmediatamente antes del nodo actual en el mismo nivel (hermano anterior)</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑myParag = document.querySelector('p');
          ¬∑myParag.¬™before('Texto antes', document.createElement('span'));</pre>
        <p class="chaptrSubSect__p"><code>remove()</code> Elimina el nodo actual del DOM</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑myParag = document.querySelector('p');
          ¬∑myParag.¬™remove();     /* /¬∫ Elimina el &lt;p&gt; del DOM ¬∫/ */</pre>
        <p class="chaptrSubSect__p"><code>replaceWith()</code> Reemplaza el nodo actual con uno o m√°s nodos o cadenas de texto</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑myParag = document.querySelector('p');
          ¬∑myParag.¬™replaceWith(document.createElement('div'), 'Nuevo texto');</pre>
        <p class="chaptrSubSect__p"><code>insertAdjacentElement()</code> Inserta un elemento en una posici√≥n espec√≠fica relativa al nodo actual</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑div = document.querySelector('div');
          const ¬∑newP = document.createElement('p');

          ¬∑div.¬™insertAdjacentElement('afterbegin', ¬∑newP); 
          /* al inicio del contenido del nodo actual */

          ¬∑div.¬™insertAdjacentElement('beforebegin', ¬∑newP); 
          /* antes del nodo actual */

          ¬∑div.¬™insertAdjacentElement('beforeend', ¬∑newP); 
          /* al final del contenido del nodo actual */

          div.¬™insertAdjacentElement('afterend', ¬∑newP); 
          /* despu√©s del nodo actual */</pre>
        <p class="chaptrSubSect__p"><code>insertAdjacentHTML()</code> Inserta HTML en una posici√≥n espec√≠fica relativa al nodo actual</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑div = document.querySelector('div');

          ¬∑div.¬™insertAdjacentHTML('beforebegin', '/¬∫ &lt;p&gt;Nuevo p√°rrafo&lt;/p&gt; ¬∫/'); 
          /* antes del nodo actual */

          ¬∑div.¬™insertAdjacentHTML('afterbegin', '/¬∫ &lt;p&gt;Nuevo p√°rrafo&lt;/p&gt; ¬∫/'); 
          /* al inicio del contenido del nodo actual */

          ¬∑div.¬™insertAdjacentHTML('beforeend', '/¬∫ &lt;p&gt;Nuevo p√°rrafo&lt;/p&gt; ¬∫/'); 
          /* al final del contenido del nodo actual */

          ¬∑div.¬™insertAdjacentHTML('afterend', '/¬∫ &lt;p&gt;Nuevo p√°rrafo&lt;/p&gt; ¬∫/'); 
          /* despu√©s del nodo actual */</pre>
        <p class="chaptrSubSect__p"><code>insertAdjacentText()</code> Inserta texto plano en una posici√≥n espec√≠fica relativa al nodo actual</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑div = document.querySelector('div');

          ¬∑div.¬™insertAdjacentText('beforebegin', 'Texto al inicio'); 
          /* antes del nodo actual */

          ¬∑div.¬™insertAdjacentText('afterbegin', 'Texto al inicio'); 
          /* al inicio del contenido del nodo actual */

          ¬∑div.¬™insertAdjacentText('beforeend', 'Texto al final'); 
          /* al final del contenido del nodo actual */

          ¬∑div.¬™insertAdjacentText('afterend', 'Texto al final'); 
          /* despu√©s del nodo actual */</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Manipulacion de atributos" codeText="">
        <p class="chaptrSubSect__p"><code>getAttribute()</code> Obtiene el valor de un atributo espec√≠fico</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑link = document.querySelector('a');
          console.log(¬∑link.¬™getAttribute('href'));   /* Devuelve la URL del enlace */        </pre>
        <p class="chaptrSubSect__p"><code>setAttribute()</code> Establece o modifica el valor de un atributo</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑img = document.querySelector('img');
          ¬∑img.¬™setAttribute('src', 'nueva-imagen.jpg');</pre>
        <p class="chaptrSubSect__p"><code>removeAttribute()</code> Elimina un atributo espec√≠fico</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑div = document.querySelector('div');
          ¬∑div.¬™removeAttribute('class');   /*/¬∫ Elimina el atributo class ¬∫/*/</pre>
        <p class="chaptrSubSect__p"><code>hasAttribute()</code> Verifica si un elemento tiene un atributo espec√≠fico</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑input = document.querySelector('input');
          console.log(¬∑input.¬™hasAttribute('disabled'));    /*/¬∫ true/false ¬∫/*/</pre>
        <p class="chaptrSubSect__p"><code>getAttributeNS()</code> Obtiene el valor de un atributo en un espacio de nombres espec√≠fico</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑svg = document.querySelector('svg');
          console.log(¬∑svg.¬™getAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns')); 
          /*/¬∫ Devuelve el namespace ¬∫/*/</pre>
        <p class="chaptrSubSect__p"><code>setAttributeNS()</code> Establece o modifica el valor de un atributo en un espacio de nombres espec√≠fico</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑svg = document.querySelector('svg');
          ¬∑svg.¬™setAttributeNS('http://www.w3.org/2000/xmlns/', 
                'xmlns:xlink', 'http://www.w3.org/1999/xlink');</pre>
        <p class="chaptrSubSect__p"><code>removeAttributeNS()</code> Elimina un atributo espec√≠fico en un espacio de nombres</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑svg = document.querySelector('svg');
          ¬∑svg.¬™removeAttributeNS('http://www.w3.org/1999/xlink', 'href');</pre>
        <p class="chaptrSubSect__p"><code>hasAttributeNS()</code> Verifica si un elemento tiene un atributo espec√≠fico en un espacio de nombres</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑svg = document.querySelector('svg');
          console.log(¬∑svg.¬™hasAttributeNS('http://www.w3.org/1999/xlink', 'href'));    
          /*/¬∫ true/false ¬∫/*/</pre>
        <p class="chaptrSubSect__p"><code>getAttributeNode()</code> Obtiene un objeto <span class="bttn">Attr</span> que representa un atributo espec√≠fico</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑input = document.querySelector('input');
          const ¬∑attr = ¬∑input.¬™getAttributeNode('type');
          console.log(¬∑attr.‚Ä¢value);   /* Devuelve "text" o el tipo del input */</pre>
        <p class="chaptrSubSect__p"><code>setAttributeNode()</code> Establece un atributo utilizando un objeto <span class="bttn">Attr</span></p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑input = document.querySelector('input');
          const ¬∑newAttr = document.¬™createAttribute('placeholder');
          ¬∑newAttr.‚Ä¢value = 'Ingresa texto';
          ¬∑input.¬™setAttributeNode(¬∑newAttr);</pre>
        <p class="chaptrSubSect__p"><code>removeAttributeNode()</code> Elimina un atributo utilizando un objeto <span class="bttn">Attr</span></p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑input = document.querySelector('input');
          const ¬∑placeholderAttr = ¬∑input.¬™getAttributeNode('placeholder');
          if (¬∑placeholderAttr) &#123;
            ¬∑input.¬™removeAttributeNode(¬∑placeholderAttr);
          &#125;</pre>
        <p class="chaptrSubSect__p"><code>getAttributeNodeNS()</code> Obtiene un objeto <span class="bttn">Attr</span> que representa un atributo en un espacio de nombres espec√≠fico</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑svg = document.querySelector('svg');
          const ¬∑xlinkHref = ¬∑svg.¬™getAttributeNodeNS('http://www.w3.org/1999/xlink', 'href');
          console.log(¬∑xlinkHref.‚Ä¢value);   /* Devuelve el valor del atributo */</pre>
        <p class="chaptrSubSect__p"><code>setAttributeNodeNS()</code> Establece un atributo en un espacio de nombres utilizando un objeto <span class="bttn">Attr</span></p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑svg = document.querySelector('svg');
          const ¬∑newAttr = document.¬™createAttributeNS('http://www.w3.org/1999/xlink', 'href');
          ¬∑newAttr.‚Ä¢value = 'https://example.com';
          ¬∑svg.¬™setAttributeNodeNS(¬∑newAttr);</pre>
        <p class="chaptrSubSect__p"><code>getAttributeNames()</code> Devuelve una lista de todos los nombres de atributos del elemento</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑div = document.querySelector('div');
          console.log(¬∑div.¬™getAttributeNames());   /*/¬∫ ["class", "id", "data-custom"] ¬∫/*/</pre>
        <p class="chaptrSubSect__p"><code>hasAttributes()</code> Verifica si el elemento tiene alg√∫n atributo</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑span = document.querySelector('span');
          console.log(¬∑span.¬™hasAttributes());    /*/¬∫ true/false ¬∫/*/</pre>
        <p class="chaptrSubSect__p"><code>toggleAttribute()</code> Alterna la existencia de un atributo. Si <code>force</code> es <code>true</code>, lo agrega; si es <code>false</code>, lo elimina</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑button = document.querySelector('button');
          ¬∑button.¬™toggleAttribute('disabled');     /* Alterna el atributo disabled */</pre>
        <p class="chaptrSubSect__p">Los m√©todos que terminan en <code>NS</code> son espec√≠ficos para trabajar con <span class="bttn">XML</span> o <span class="bttn">HTML5</span> cuando se utilizan espacios de nombres (como <code>xlink:href</code> en <span class="bttn">SVG</span>)</p>
        <p class="chaptrSubSect__p">Los m√©todos que trabajan con objetos <span class="bttn">Attr</span> representan atributos como entidades independientes</p>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="B√∫squeda de elementos" codeText="">
        <p class="chaptrSubSect__p"><span class="tooltip" title="Compartido con Document">üôèüèª</span><code>querySelector()</code> Devuelve el <strong>primer</strong> elemento que coincida con un selector CSS espec√≠fico, etiquetas, clases, id o atributos</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑div = document.createElement('div');
          ¬∑div.‚Ä¢textContent = 'Div Wrapper';
          document.body.append(¬∑div);
          
          const ¬∑p1 = document.createElement('p');
          ¬∑p1.‚Ä¢textContent = 'Paragraph 1';
          ¬∑div.append(¬∑p1);
          
          const ¬∑p2 = document.createElement('p');
          ¬∑p2.‚Ä¢textContent = 'Paragraph 2';
          ¬∑div.append(¬∑p2);
          
          const ¬∑pSelected = document.querySelector('p');
          console.log(¬∑pSelected.‚Ä¢textContent);
          ‚ãó Paragraph 1</pre>
        <p class="chaptrSubSect__p"><span class="tooltip" title="Compartido con Document">üôèüèª</span><code>querySelectorAll()</code> Devuelve una lista est√°tica (NodeList) de todos los elementos que coincidan con un selector CSS espec√≠fico</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑div = document.createElement('div');
          ¬∑div.‚Ä¢textContent = 'Div Wrapper';
          document.body.append(¬∑div);
          
          const ¬∑p1 = document.createElement('p');
          ¬∑p1.‚Ä¢textContent = 'Paragraph 1';
          ¬∑div.append(¬∑p1);
          
          const ¬∑p2 = document.createElement('p');
          ¬∑p2.‚Ä¢textContent = 'Paragraph 2';
          ¬∑div.append(¬∑p2);
          
          const ¬∑pSelected = document.querySelectorAll('p');
          ¬∑pSelected.forEach(¬∑elem =&gt; console.log(¬∑elem.‚Ä¢textContent));
          ‚ãó Paragraph 1
          ‚ãó Paragraph 2</pre>
        <p class="chaptrSubSect__p"><code>.matches(cssSelector)</code> Comprueba si un elemento coincide con un selector CSS</p>
        <pre class="chaptrSubSect__console wScript">
          let ¬∑elem = document.querySelector('/¬∫ .article_h2 ¬∫/');
          if (¬∑elem.matches('/¬∫ h2.article_h2 ¬∫/'))&#123;
            console.log('Es un h2 con clase "/¬∫ article_h2 ¬∫/"');
          &#125;;</pre>
        <p class="chaptrSubSect__p"><code>.closest()</code> Busca el ancestro m√°s cercano que coincida con un selector CSS, incluyendo el propio elemento</p>
        <pre class="chaptrSubSect__console wScript">
          let ¬∑elem = document.querySelector('/¬∫ .chapter ¬∫/');
          let ¬∑ancestor = ¬∑elem.closest('/¬∫ .book ¬∫/');</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Geometr√≠a/posici√≥n/scroll" codeText="">
        <p class="chaptrSubSect__p"><code>getBoundingClientRect()</code> Devuelve el tama√±o de un elemento y su posici√≥n relativa respecto al viewport</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑elem = document.querySelector('div');
          const ¬∑rect = ¬∑elem.¬™getBoundingClientRect();
          console.log(¬∑rect.¬∫top, ¬∑rect.¬∫right, ¬∑rect.¬∫bottom, ¬∑rect.¬∫left);</pre>
        <p class="chaptrSubSect__p"><code>getClientRects()</code> Devuelve una colecci√≥n de rect√°ngulos que representan las √°reas ocupadas por el elemento (√∫til para texto con varias l√≠neas)</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑elem = document.querySelector('p');
          const ¬∑rects = ¬∑elem.¬™getClientRects();
          for (let #rect of ¬∑rects) &#123;
            console.log(#rect.¬∫top, #rect.¬∫right, #rect.¬∫bottom, #rect.¬∫left);
          &#125;</pre>
        <p class="chaptrSubSect__p"><code>scroll()</code> Desplaza el elemento hasta una posici√≥n espec√≠fica</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑elem = document.querySelector('div');
          ¬∑elem.¬™scroll(¬¨0, ¬¨100);</pre>
        <p class="chaptrSubSect__p"><span class="tooltip" title="Compartido con Window">üôèüèª</span><code>scrollBy()</code> Desplaza el elemento relativo a su posici√≥n actual</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑elem = document.querySelector('div');
          ¬∑elem.¬™scrollBy(¬¨0, ¬¨100);
        
          /* tambi√©n acepta un objeto con opciones */
          ¬∑elem.¬™scrollBy(&#123; 
            top: ¬¨50, 
            left: ¬¨0, 
            behavior: 'smooth' 
          &#125;);</pre>
        </pre>
        <p class="chaptrSubSect__p"><span class="tooltip" title="Compartido con Window">üôèüèª</span><code>scrollTo()</code> Desplaza el elemento hasta una posici√≥n absoluta</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑elem = document.querySelector('div');
          ¬∑elem.¬™scrollTo(¬¨0, ¬¨100);
        
          /* tambi√©n acepta un objeto con opciones */
          ¬∑elem.¬™scrollTo(&#123; 
            top: ¬¨50, 
            left: ¬¨0, 
            behavior: 'smooth' 
          &#125;);</pre>
        <p class="chaptrSubSect__p"><code>scrollIntoView()</code> Hace que el elemento sea visible desplazando el viewport si es necesario</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑elem = document.querySelector('div');
          ¬∑elem.¬™scrollIntoView();
        
          /* tambi√©n acepta un objeto con opciones */
          ¬∑elem.¬™scrollIntoView(&#123; 
            block: 'center', 
            inline: 'nearest', 
            behavior: 'smooth' 
          &#125;);
        </pre>
        <p class="chaptrSubSect__p"><code>scrollIntoViewIfNeeded()</code> Desplaza el elemento solo si no est√° completamente visible</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑elem = document.querySelector('div');
          ¬∑elem.¬™scrollIntoViewIfNeeded();</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Estilado y estilos computados" codeText="">
        <p class="chaptrSubSect__p"><code>computedStyleMap()</code> Devuelve un mapa (StylePropertyMapReadOnly) con los valores calculados de todas las propiedades de estilo del elemento</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑elem = document.querySelector('div');
          const ¬∑styles = ¬∑elem.¬™computedStyleMap();
          console.log(¬∑styles.get('color'));</pre>
        </pre>
        <p class="chaptrSubSect__p"><code>animate()</code> Inicia una animaci√≥n en el elemento utilizando una lista de fotogramas de clave (keyframes) y opciones de temporizaci√≥n</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑elem = document.querySelector('div');
          ¬∑elem.¬™animate(
            [
              &#123; opacity: ¬¨0 &#125;, 
              &#123; opacity: ¬¨1 &#125;
            ], 
            &#123; duration: ¬¨1000, iterations: ¬¨2 &#125;
          );</pre>
        </pre>
        <p class="chaptrSubSect__p"><code>getAnimations()</code> Devuelve una lista (Animation[]) de todas las animaciones activas aplicadas al elemento</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑elem = document.querySelector('div');
          const ¬∑animation = ¬∑elem.¬™animate(
            [
              &#123; opacity: ¬¨0 &#125;, 
              &#123; opacity: ¬¨1 &#125;
            ], 
            &#123; duration: ¬¨1000, iterations: ¬¨2 &#125;
          );

          const ¬∑activeAnimations = ¬∑elem.¬™getAnimations();
          console.log(¬∑activeAnimations.length);
          ‚ãó 1</pre>
        </pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Shadow" codeText="DOM">
        <p class="chaptrSubSect__p"><code>attachShadow()</code> Crea un Shadow DOM en un elemento, encapsulando estilos y contenido</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑shadow = √ßelement.¬™attachShadow(&#123; mode: 'open' &#125;);
          ¬∑shadow.‚Ä¢innerHTML = '/¬∫ &lt;style&gt; p &#123; color: red; &#125; &lt;/style&gt; &lt;p&gt;Hola&lt;/p&gt; ¬∫/';</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Foco y captura de cursor" codeText="">
        <p class="chaptrSubSect__p"><code>hasPointerCapture()</code> Verifica si el elemento captur√≥ un evento de puntero (ej. clic)</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑elem = document.querySelector('div');
          console.log(¬∑elem.¬™hasPointerCapture(‚Ä¢pointerID));</pre>
        </pre>
        <p class="chaptrSubSect__p"><code>setPointerCapture()</code> Captura eventos de puntero (ej. movimiento) para un elemento</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑elem = document.querySelector('div');
          ¬∑elem.¬™setPointerCapture(‚Ä¢pointerID);</pre>
        </pre>
        <p class="chaptrSubSect__p"><code>requestFullscreen()</code> Pasa el elemento a modo fullscreen</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑elem = document.querySelector('div');
          ¬∑elem.¬™requestFullscreen();</pre>
        </pre>
        <p class="chaptrSubSect__p"><code>requestPointerLock()</code>  Bloquea el puntero dentro del elemento (√∫til para juegos)</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑elem = document.querySelector('canvas');
          ¬∑elem.¬™requestPointerLock();</pre>
        </pre>
      </ChaptrSubSect>
    </ChaptrSect>
    <ChaptrSect h3Title="Eventos de" codeText="EventTarget">
      <ChaptrSubSect h4Title="Definici√≥n" codeText="">
        <p class="chaptrSubSect__p">Los eventos de <span class="bttn">EventTarget</span> son compartidos con <span class="bttn">Window</span>, <span class="bttn">Document</span>, <span class="bttn">Element</span>, <span class="bttn">Node</span>, etc</p>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Eventos" codeText="">
        <p class="chaptrSubSect__p"><span class="tooltip" title="Compartido con Window, Document, Element, etc">üôèüèª</span><code>addEventListener():</code> Asocia un manejador de eventos a un elemento</p>
        <pre class="chaptrSubSect__console wScript">
          ¬∑myElement.addEventListener('click', () =&gt; console.log('/¬∫ clik! ¬∫/');</pre>
        <p class="chaptrSubSect__p"><span class="tooltip" title="Compartido con Window, Document, Element, etc">üôèüèª</span><code>removeEventListener():</code> </p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑handler = () =&gt; console.log('/¬∫ click! ¬∫/');
          
          ¬∑myElement.addEventListener('click', ¬∑handler);
          ¬∑myElement.removeEventListener('click', ¬∑handler);</pre>
        <p class="chaptrSubSect__p"><span class="tooltip" title="Compartido con Window, Document, Element, etc">üôèüèª</span><code>dispatchEvent():</code> Dispara manualmente un evento en un elemento</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑event = new Event('miEvento');
          √ßwindow.dispatchEvent(¬∑event);</pre>
      </ChaptrSubSect>
    </ChaptrSect>
    <ChaptrSect h3Title="M√©todos de" codeText="DocumentFragment">
      <ChaptrSubSect h4Title="Definici√≥n" codeText="">
        <p class="chaptrSubSect__p">Los m√©todos de <span class="bttn">DocumentFragment</span> son similares a los de <span class="bttn">Node</span> porque extiende esta interfaz, pero se incluyen aqu√≠ porque son espec√≠ficos de fragmentos de documentos</p>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Manipulaci√≥n de Nodos" codeText="">
        <p class="chaptrSubSect__p"><span class="tooltip" title="Compartido con Element">üôèüèª</span><span class="tooltip" title="Obsoleto pero funcional. Usar .append() es m√°s moderno y potente.">üî¥</span><code>.appendChild()</code>Agrega un nodo hijo al final de un elemento padre</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑myDiv = document.querySelector('div');
          const ¬∑newP = document.createElement('p');
          ¬∑myDiv.appendChild(¬∑newP);</pre>
        <p class="chaptrSubSect__p"><span class="tooltip" title="Compartido con Element">üôèüèª</span><code>.append()</code> Es utilizado para a√±adir nodos o cadenas de texto al final de un nodo</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑myDiv = document.querySelector('div');
          ¬∑myDiv.append('Texto final', document.createElement('p'));</pre>
        <p class="chaptrSubSect__p"><span class="tooltip" title="Compartido con Element">üôèüèª</span><code>.replaceChildren()</code> Reemplaza los hijos existentes de <span class="bttn">Document</span> por un nuevo grupo de hijos espec√≠ficos</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑myDiv = document.querySelector('div');
          ¬∑myDiv.¬™replaceChildren('Nuevo texto', document.createElement('p'));</pre>
        <p class="chaptrSubSect__p"><span class="tooltip" title="Compartido con Element">üôèüèª</span><code>prepend()</code></p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑myDiv = document.querySelector('div');
          ¬∑myDiv.¬™prepend('Texto inicial', document.createElement('p'));</pre>
          <p class="chaptrSubSect__p"><span class="tooltip" title="Compartido con Element">üôèüèª</span><code>querySelector()</code> Devuelve el <strong>primer</strong> elemento que coincida con un selector CSS espec√≠fico, etiquetas, clases, id o atributos</p>
          <pre class="chaptrSubSect__console wScript">
            const ¬∑div = document.createElement('div');
            ¬∑div.‚Ä¢textContent = 'Div Wrapper';
            document.body.append(¬∑div);
            
            const ¬∑p1 = document.createElement('p');
            ¬∑p1.‚Ä¢textContent = 'Paragraph 1';
            ¬∑div.append(¬∑p1);
            
            const ¬∑p2 = document.createElement('p');
            ¬∑p2.‚Ä¢textContent = 'Paragraph 2';
            ¬∑div.append(¬∑p2);
            
            const ¬∑pSelected = document.querySelector('p');
            console.log(¬∑pSelected.‚Ä¢textContent);
            ‚ãó Paragraph 1</pre>
        <p class="chaptrSubSect__p"><span class="tooltip" title="Compartido con Element">üôèüèª</span><code>querySelectorAll()</code> Devuelve una lista est√°tica (NodeList) de todos los elementos que coincidan con un selector CSS espec√≠fico</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑div = document.createElement('div');
          ¬∑div.‚Ä¢textContent = 'Div Wrapper';
          document.body.append(¬∑div);
          
          const ¬∑p1 = document.createElement('p');
          ¬∑p1.‚Ä¢textContent = 'Paragraph 1';
          ¬∑div.append(¬∑p1);
          
          const ¬∑p2 = document.createElement('p');
          ¬∑p2.‚Ä¢textContent = 'Paragraph 2';
          ¬∑div.append(¬∑p2);
          
          const ¬∑pSelected = document.querySelectorAll('p');
          ¬∑pSelected.forEach(¬∑elem =&gt; console.log(¬∑elem.‚Ä¢textContent));
          ‚ãó Paragraph 1
          ‚ãó Paragraph 2</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Uso de pseudoclases con m√©todos" codeText="">
        <p class="chaptrSubSect__p">Los siguientes m√©todos soportan pseudoclases</p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li"><code>querySelector</code>: Devuelve el primer elemento que coincide con la pseudoclase.</li>
          <li class="chaptrSubSectUl__li"><code>querySelectorAll</code>: Devuelve todos los elementos que coincide con la pseudoclase.</li>
          <li class="chaptrSubSectUl__li"><code>matches</code>: Verifica si un elemento espec√≠fico cumple con una pseudoclase.</li>
          <li class="chaptrSubSectUl__li"><code>closest</code>: Busca el ancestro m√°s cercano del elemento que coincide con la pseudoclase.</li>
        </ul>
        <p class="chaptrSubSect__p">Lista de pseudoclases CSS soportadas por los m√©todos mencionados</p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li"><strong>Pseudoclases din√°micas:</strong> <code>:hover</code>, <code>:active</code>, <code>:focus</code>, <code>:focus-visible</code>, <code>:focus-within</code>.</li>
          <li class="chaptrSubSectUl__li"><strong>Pseudoclases estructurales:</strong> <code>:nth-child(n)</code>, <code>:nth-last-child(n)</code>, <code>:nth-of-type(n)</code>, <code>:nth-last-of-type(n)</code>, <code>:first-child</code>, <code>:last-child</code>, <code>:only-child</code>, <code>:first-of-type</code>, <code>:last-of-type</code>, <code>:only-of-type</code>, <code>:empty</code>.</li>
          <li class="chaptrSubSectUl__li"><strong>Pseudoclases estructurales:</strong> <code>:enabled</code>, <code>:disabled</code>, <code>:checked</code>, <code>:indeterminate</code>, <code>:default</code>, <code>:valid</code>, <code>:invalid</code>, <code>:in-range</code>, <code>:out-of-range</code>, <code>:requiered</code>, <code>:optional</code>, <code>:read-only</code>, <code>:read-write</code>.</li>
          <li class="chaptrSubSectUl__li"><strong>Pseudoclases l√≥gicas:</strong> <code>:not(sltr)</code>, <code>:is(sltr)</code>, <code>:where(sltr)</code>, <code>:has(sltr)</code>.</li>
          <li class="chaptrSubSectUl__li"><strong>Otras pseudoclases:</strong> <code>:root</code>, <code>:target</code>, <code>:target-within</code>, <code>:lang(lang)</code>, <code>:dir(dir)</code>, <code>:any-link</code>, <code>:link</code>, <code>:visited</code>, <code>:scope</code>, <code>:fullscreen</code>, <code>:placeholder-shown</code>.</li>
        </ul>
      </ChaptrSubSect>
    </ChaptrSect>
    <ChaptrSect h3Title="Atributos y propiedades" codeText="">
      <ChaptrSubSect h4Title="Definici√≥n" codeText="">
        <p class="chaptrSubSect__p">Cuando el navegador carga la p√°gina, ‚Äúlee‚Äù "parsea" el <span class="bttn">HTML</span> y genera objetos <span class="bttn">DOM</span> a partir de √©l. Para los nodos de elementos, la mayor√≠a de los atributos <span class="bttn">HTML</span> est√°ndar se convierten autom√°ticamente en propiedades de los objetos <span class="bttn">DOM</span>. Pero el mapeo de propiedades y atributos no es uno a uno</p>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Propiedades" codeText="DOM">
        <p class="chaptrSubSect__p">Las propiedades y m√©todos <span class="bttn">DOM</span> se comportan igual que los objetos JavaScript normales</p>
        <pre class="chaptrSubSect__console wScript">
          document.body.¬∫myData = &#123;
            name: '√âder',
            title: 'Emperador'
          &#125;;

          console.log(document.body.¬∫myData.¬∫tittle);
          ‚ãó √âder</pre>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li">Pueden tener cualquier valor.</li>
          <li class="chaptrSubSectUl__li">Distingue entre may√∫sculas y min√∫sculas.</li>
        </ul>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Atributos" codeText="">
        <p class="chaptrSubSect__p">Est√°n definidos en el HTML, son siempre <span class="bttn">strings</span> y no son "case sensitive"</p>
        <p class="chaptrSubSect__p">Estos son los m√©todos principales</p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li"><code>elem.hasAttribute(nombre)</code></li>
          <li class="chaptrSubSectUl__li"><code>elem.getAttribute(nombre)</code></li>
          <li class="chaptrSubSectUl__li"><code>elem.setAttribute(nombre, valor)</code></li>
          <li class="chaptrSubSectUl__li"><code>elem.removeAttribute(nombre)</code></li>
        </ul>
        <p class="chaptrSubSect__p">Lista oficial de atributos: <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes">Link üîó</a></p>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Diferencias" codeText="">
        <table class="chaptrSubSect__table">
          <thead>
            <tr>
              <th>Propiedades</th>
              <th>Atributos</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Pueden tener cualquier tipo</td>
              <td>Siempre son strings</td>
            </tr>
            <tr>
              <td>Distinguen may√∫sculas</td>
              <td>No distinguen may√∫sculas</td>
            </tr>
          </tbody>
        </table>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Sincronizaci√≥n" codeText="">
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li"><strong>Atributos est√°ndar:</strong> Se sincronizan bidireccionalmente (excepto casos como <code>value</code>).</li>
          <li class="chaptrSubSectUl__li"><strong>Atributos no est√°ndar:</strong> No crean propiedades <span class="bttn">DOM</span> pero pueden accederse mediante <code>getAttribute</code>.</li>
        </ul>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Atributos personalizados" codeText="">
        <p class="chaptrSubSect__p">Uso</p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li">Pasar datos desde HTML a JS.</li>
          <li class="chaptrSubSectUl__li">Dise√±ar elementos basados en su estado.</li>
        </ul>
        <p class="chaptrSubSect__p">Atributos <code>data-*</code></p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li">Reservados para desarrolladores, seguros frente a conflictos.</li>
          <li class="chaptrSubSectUl__li">Acceso a trav√©s de <code>dataset</code>.</li>
        </ul>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Casos de uso" codeText="">
        <p class="chaptrSubSect__p">Cu√°ndo Usar Atributos</p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li">Atributos no est√°ndar (especialmente si no tienen formato data-*.</li>
          <li class="chaptrSubSectUl__li">Necesitas el valor ‚Äúcomo est√° en HTML‚Äù.</li>
        </ul>
        <p class="chaptrSubSect__p">Cu√°ndo Usar Propiedades</p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li">En la mayor√≠a de las situaciones, ya que son m√°s r√°pidas y soportan tipos avanzados.</li>
        </ul>
      </ChaptrSubSect>
    </ChaptrSect>
    <ChaptrSect h3Title="Estilos y clases" codeText="">
      <ChaptrSubSect h4Title="" codeText=".className">
        <p class="chaptrSubSect__p">Obtiene y establece el valor del atributo <code>class</code> del elemento especificado. Si asignamos algo a <code>elem.className</code>, reemplaza toda la cadena de clases</p>
        <pre class="chaptrSubSect__console wScript">
          ¬∑h2__¬∑elem.className = '/¬∫ main‚àû_tittle ¬∫/';</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="" codeText=".classList">
        <p class="chaptrSubSect__p">Obtiene y establece el valor del atributo <code>class</code> del elemento especificado. Si asignamos algo a <code>elem.className</code>, reemplaza toda la cadena de clases. Adem√°s es iterable</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑elementClasses = √ßh2.classList;
          const ¬∑elementClassesToArray = Array.from(¬∑elementClasses);
          console.log(¬∑elementClassesToArray);
          ‚ãó /¬∫ ["main__h2", "main__h2--active"] ¬∫/</pre>
        <p class="chaptrSubSect__p">M√©todos de <code>classList</code></p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li"><code>add</code>/<code>remove</code><code>("class")</code>: agrega o remueve la clase.</li>
          <li class="chaptrSubSectUl__li"><code>toggle("class")</code>: agrega la clase si no existe, si no, la elimina.</li>
          <li class="chaptrSubSectUl__li"><code>contains("class")</code>: verifica si tiene la clase dada, devuelve <span class="bttn">Boolean</span>.</li>
        </ul>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Style de un elemento" codeText="">
        <p class="chaptrSubSect__p">La propiedad <code>elem.style</code> es un objeto que corresponde a lo escrito en el atributo <code>style</code></p>
        <p class="chaptrSubSect__p">Para propiedades de varias palabras se usa <mark>camelCase</mark></p>
        <pre class="chaptrSubSect__console wScript">
          /¬∫ background-color ¬∫/ =&gt; ¬∑elem.√ßstyle.¬∫backgroundColor
          /¬∫ z-index ¬∫/ =&gt; ¬∑elem.√ßstyle.¬∫zIndex
          /¬∫ border-left-width ¬∫/ =&gt; ¬∑elem.√ßstyle.¬∫borderLeftWidth</pre>
        <p class="chaptrSubSect__p">Por lo que quedar√≠a realmente as√≠</p>
        <pre class="chaptrSubSect__console wScript">
          document.body.√ßstyle.¬∫backgroundColor = 'red';</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Reseteando la propiedad" codeText="style">
        <p class="chaptrSubSect__p">Si establecemos <code>style.display</code> como una cadena vac√≠a, entonces el navegador aplica clases y estilos CSS incorporados normalmente por el navegador, como si no existiera tal <code>style.display</code></p>
        <pre class="chaptrSubSect__console wScript">
          document.body.√ßstyle.¬∫display = 'none';   /* lo oculta */
          document.body.√ßstyle.¬∫display = '';   /* vuelve a default */</pre>
        <p class="chaptrSubSect__p">Pero tambi√©n contamos con un m√©todo especial para quitar una propiedad: <code>removeProperty('style property')</code></p>
        <pre class="chaptrSubSect__console wScript">
          document.body.√ßstyle.¬∫background = 'red';   /* establece el background */
          document.body.√ßstyle.@removeProperty('background');  /* elimina background */</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Estableciendo todo el estilo como cadena" codeText="">
        <p class="chaptrSubSect__p">Para establecer todo el estilo como una cadena, hay una propiedad especial: <code>style.cssText</code></p>
        <pre class="chaptrSubSect__console wScript">
          ¬∑div.body.√ßstyle.¬∫cssText = '/¬∫ color: red; width: 100px; heigth: 50px ¬∫/';</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Estilos calculados" codeText="getComputedStyle">
        <p class="chaptrSubSect__p">La propiedad <code>style</code> solo opera en el valor del atributo <code>style</code>, sin ninguna cascada de css, por lo que no podemos leer ninguna clase CSS usando <code>elem.style</code> e incrementar/decrementar su propiedad. Hay otro m√©todo para eso: <code>getComputedStyle</code></p>
        <pre class="chaptrSubSect__console wScript">
          @getComputedStyle(‚Ä¢element, [‚Ä¢pseudo])</pre>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li"><code>element</code>: El elemento del cual se va a leer el valor.</li>
          <li class="chaptrSubSectUl__li"><code>pseudo</code>: Un pseudo-elemento es requerido, por ejemplo <code>::before</code>. Si no lo necesitas, om√≠telo o p√°salo como cadena vac√≠a.</li>
        </ul>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑myH2Lssn = document.querySelector('/¬∫ .lssnArt__h2 ¬∫/');
          const ¬∑computedStylesH2 = @getComputedStyle(¬∑myH2Lssn);
          console.log(¬∑computedStylesH2.¬∫backgroundColor);    ‚ãó ‚àûpurple</pre>
      </ChaptrSubSect>
    </ChaptrSect>
    <ChaptrSect h3Title="Tama√±o de elementos y desplazamiento" codeText="">
      <ChaptrSubSect h4Title="Elemento de muestra" codeText="">
        <p class="chaptrSubSect__p">Creamos un elemento de muestra para demostrar las propiedades</p>
        <pre class="chaptrSubSect__console wScript">
          /¬∫ &lt;div id="example"&gt;...Texto...&lt;/div&gt; ¬∫/
          /¬∫ &lt;style&gt; ¬∫/
            ÔºÉexample &#123;
              width: 300px;
              height: 200px;
              border: 25px solid ÔºÉE8C48F;
              padding: 20px;
              overflow: auto;
            &#125;
          /¬∫ &lt;/style&gt; ¬∫/</pre>
        <p class="chaptrSubSect__p">Este tiene borde, relleno y desplazamiento. El conjunto completo de funciones. No hay m√°rgenes porque no son parte del elemento en s√≠, y no tienen propiedades especiales</p>
        <img src="../../../src/assets/img/img4.webp" alt="Esquema de propiedades css" class="chaptrSubSect__img">
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Geometr√≠a" codeText="">
        <p class="chaptrSubSect__p">Aqu√≠ est√° la imagen general con propiedades geom√©tricas</p>
        <img src="../../../src/assets/img/img5.webp" alt="Esquema de propiedades css" class="chaptrSubSect__img">
        <p class="chaptrSubSect__p">Los valores de estas propiedades son t√©cnicamente n√∫meros, pero estos n√∫meros son ‚Äúde p√≠xeles‚Äù, as√≠ que estas son medidas de p√≠xeles</p>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="offsetParent, offsetLeft/Top" codeText="">
        <p class="chaptrSubSect__p">Estas propiedades son <mark>raramente necesarias</mark>, pero es √∫til en aplicaciones espec√≠ficas como drag & drop o sistemas que dependen de posiciones relativas</p>
        <p class="chaptrSubSect__p"><code>offsetParent</code>: es el antepasado m√°s cercano de un elemento que cumple con al menos uno de estos criterios</p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li"><strong>Est√° posicionado:</strong> Su propiedad <code>position</code> est√° configurada como <code>relative</code>, <code>absolute</code>, <code>fixed</code> o <code>sticky</code>.</li>
          <li class="chaptrSubSectUl__li"><strong>Es una tabla o parte de una tabla:</strong> <code>td</code>, <code>th</code>, <code>table</code> son autom√°ticamente <code>offsetParent</code>.</li>
          <li class="chaptrSubSectUl__li"><strong>Es el <code>body</code> del documento:</strong> si no hay otro elemento posicionado m√°s cercano.</li>
        </ul>
        <p class="chaptrSubSect__p">Si ninguno de estos casos se cumple, el <code>offsetParent</code> es <code>null</code></p>
        <pre class="chaptrSubSect__console wScript">
          /* html */
          /¬∫ &lt;main style="position: relative" id="main"&gt; ¬∫/
              /¬∫ &lt;article&gt; ¬∫/
                  /¬∫ &lt;div id="example" style="position: absolute; left: 180px; top: 180px"&gt; ¬∫/
                      /¬∫ ...texto... ¬∫/
                  /¬∫ &lt;/div&gt; ¬∫/
              /¬∫ &lt;/article&gt; ¬∫/
          /¬∫ &lt;/main&gt; ¬∫/

          /* js */
          const ¬∑example = document.querySelector('ÔºÉexample');
          console.log(¬∑example.¬∫offsetParent.¬∫id);    ‚ãó main
          console.log(¬∑example.¬∫offsetLeft);    ‚ãó 180
          console.log(¬∑example.¬∫offsetTop);   ‚ãó 180</pre>
        <img src="../../../src/assets/img/img6.webp" alt="Esquema de propiedades css" class="chaptrSubSect__img">
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="offsetWidth/Height" codeText="">
        <p class="chaptrSubSect__p">Estas dos propiedades son las m√°s simples. Proporcionan el ancho y alto ‚Äúexterior‚Äù del elemento (su tama√±o completo), incluidos los bordes</p>
        <img src="../../../src/assets/img/img7.webp" alt="Esquema de propiedades css" class="chaptrSubSect__img">
        <p class="chaptrSubSect__p">Para nuestro elemento de muestra</p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li"><code>offsetWidth = 390</code>: el ancho exterior, puede ser calculado como CSS-width interno (300px) m√°s padding (2 * 20px) y bordes (2 * 25px).</li>
          <li class="chaptrSubSectUl__li"><code>offsetHeight = 290</code>: el alto exterior.</li>
        </ul>
        <p class="chaptrSubSect__p">Las propiedades geom√©tricas para elementos no mostrados son cero o <code>null</code>.</p>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="clientTop/Left" codeText="">
        <p class="chaptrSubSect__p">Estas dos propiedades sirven para medir los bordes</p>
        <img src="../../../src/assets/img/img8.webp" alt="Esquema de propiedades css" class="chaptrSubSect__img">
        <p class="chaptrSubSect__p">Para nuestro elemento de muestra</p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li"><code>clientLeft = 25</code>: ancho del borde izquierdo.</li>
          <li class="chaptrSubSectUl__li"><code>clientTop = 25</code>: ancho del borde superior.</li>
        </ul>
        <p class="chaptrSubSect__p">Pero para ser precisos: estas propiedades no son el ancho/alto del borde sino las coordenadas relativas del lado interior respecto al lado exterior</p>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="clientWidth/Height" codeText="">
        <p class="chaptrSubSect__p">Estas dos propiedades proporcionan el tama√±o del √°rea dentro de los bordes del elemento, icluyendo el ancho del contenido junto con los rellenos, pero sin la barra de desplazamiento</p>
        <img src="../../../src/assets/img/img9.webp" alt="Esquema de propiedades css" class="chaptrSubSect__img">
        <p class="chaptrSubSect__p">Si no hay rellenos, entonces <code>clientWidth/Height</code> es exactamente el √°rea de contenido, dentro de los bordes y la barra de desplazamiento (si la hay)</p>
        <img src="../../../src/assets/img/img10.webp" alt="Esquema de propiedades css" class="chaptrSubSect__img">
        <p class="chaptrSubSect__p">Entonces, cuando no hay relleno, podremos usar <code>clientWidth/Height</code> para obtener el tama√±o del √°rea de contenido</p>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="scrollWidth/Height" codeText="">
        <p class="chaptrSubSect__p">Estas propiedades son como <code>clientWidth/Height</code>, pero tambi√©n incluyen las partes desplazadas (ocultas)</p>
        <img src="../../../src/assets/img/img11.webp" alt="Esquema de propiedades css" class="chaptrSubSect__img">
        <p class="chaptrSubSect__p">Para nuestro elemento de muestra</p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li"><code>scrollHeight = 723</code>: es la altura interior completa del √°rea de contenido, incluyendo las partes desplazadas.</li>
          <li class="chaptrSubSectUl__li"><code>scrollWidth = 324</code>: es el ancho interior completo, aqu√≠ no tenemos desplazamiento horizontal, por lo que es igual a <code>clientWidth</code>.</li>
        </ul>
        <p class="chaptrSubSect__p">Podemos usar estas propiedades para expandir el elemento a su ancho/alto completo</p>
        <pre class="chaptrSubSect__console wScript">
          ¬∑element.¬∫style.¬∫height = `$&#123;¬∑element.¬∫scrollHeight&#125;px`;</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="scrollLeft/Top" codeText="">
        <p class="chaptrSubSect__p">Estas propiedades son el ancho/alto de la parte oculta y desplazada del elemento</p>
        <img src="../../../src/assets/img/img12.webp" alt="Esquema de propiedades css" class="chaptrSubSect__img">
        <p class="chaptrSubSect__p">En otras palabras, scrollTop es ‚Äúcu√°nto se desplaza hacia arriba‚Äù</p>
        <p class="chaptrSubSect__p">La mayor√≠a de las propiedades aqu√≠ son solo lectura, pero <code>scrollLeft/Top</code> se puede cambiar, y el navegador desplazar√° el elemento</p>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="No uses width/height obtenidos de CSS" codeText="">
        <p class="chaptrSubSect__p">Podemos leer CSS <code>height</code>/<code>width</code> usando <code>getComputedStyle</code>, pero deber√≠amos usar propiedades geom√©tricas en su lugar</p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li"><strong>Primero:</strong> CSS <code>width</code>/<code>height</code> dependen de otra propiedad: <code>box-sizing</code> que define ‚Äúqu√© es‚Äù CSS <code>width</code>/<code>height</code>. Un cambio en <code>box-sizing</code> para prop√≥sitos de CSS puede romper dicho JavaScript.</li>
          <li class="chaptrSubSectUl__li"><strong>Segundo:</strong> CSS <code>width</code>/<code>height</code> puede ser <code>auto</code>.</li>
          <li class="chaptrSubSectUl__li"><strong>Tercero:</strong> una barra de desplazamiento, CSS <code>width</code> las ignora.</li>
        </ul>
      </ChaptrSubSect>
    </ChaptrSect>
    <ChaptrSect h3Title="Tama√±o de ventana y desplazamiento" codeText="">
      <ChaptrSubSect h4Title="Ancho/alto de la ventana" codeText="">
        <p class="chaptrSubSect__p"><code>document.documentElement.clientWidth/Height</code></p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li">Proporcionan el ancho/alto visibles de la ventana sin incluir la barra de desplazamiento.</li>
          <li class="chaptrSubSectUl__li">√ötil para determinar el espacio disponible para el contenido visible.</li>
        </ul>
        <p class="chaptrSubSect__p"><code>window.innerWidth/Height</code></p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li">Incluyen la barra de desplazamiento si est√° presente.</li>
          <li class="chaptrSubSectUl__li">No se recomiendan si necesitamos medir √∫nicamente el espacio visible.</li>
        </ul>
        <pre class="chaptrSubSect__console wScript">
          console.log(document.√ßdocumentElement.¬∫clientHeight);   ‚ãó 909
          console.log(document.√ßdocumentElement.¬∫clientWidth);    ‚ãó 945
          console.log(√ßwindow.¬∫innerHeight);    ‚ãó 909
          console.log(√ßwindow.¬∫innerWidth);   ‚ãó 960</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Tama√±o completo del documento" codeText="">
        <p class="chaptrSubSect__p">No siempre podemos confiar en <code>document.documentElement.scrollHeight</code>, ya que puede dar resultados inconsistentes</p>
        <p class="chaptrSubSect__p">Para obtener el tama√±o completo del documento (incluyendo la parte desplazada)</p>
        <pre class="chaptrSubSect__console wScript">
          let ¬∑scrollHeight = √ßMath.@max(
            document.body.¬∫scrollHeight,
            document.√ßdocumentElement.¬∫scrollHeight,
            document.body.¬∫offsetHeight,
            document.√ßdocumentElement.¬∫offsetHeight,
            document.body.¬∫clientHeight,
            document.√ßdocumentElement.¬∫clientHeight,
          );
          console.log(`Altura completa del documento $&#123;¬∑scrollHeight&#125;`);
          ‚ãó Altura completa del documento 7873
        </pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Desplazamiento actual" codeText="">
        <p class="chaptrSubSect__p">Propiedades para leer el desplazamiento actual: <code>window.pageYOffset</code> y <code>window.pageXOffset</code></p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li">Altamente confiables y universales.</li>
          <li class="chaptrSubSectUl__li">Equivalentes a <code>window.scrollY</code> y <code>window.scrollX</code>.</li>
        </ul>
        <pre class="chaptrSubSect__console wScript">
          console.log(√ßwindow.¬∫pageYOffset);    ‚ãó 0
          console.log(√ßwindow.¬∫pageXOffset);    ‚ãó 6742</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="M√©todos para desplazar la p√°gina" codeText="">
        <p class="chaptrSubSect__p"><code>window.scrollBy(x, y)</code></p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li">Desplaza la p√°gina de forma relativa a la posici√≥n actual.
          </li>
        </ul>
        <pre class="chaptrSubSect__console wScript">
          √ßwindow.@scrollBy(¬¨0, ¬¨500)</pre>
        <p class="chaptrSubSect__p"><code>window.scrollTo(x, y)</code></p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li">Desplaza la p√°gina a una posici√≥n absoluta.
          </li>
        </ul>
        <pre class="chaptrSubSect__console wScript">
          √ßwindow.@scrollTo(¬¨0, ¬¨50)</pre>
        <p class="chaptrSubSect__p"><code>element.scrollIntoView(top)</code></p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li">Desplaza la p√°gina para hacer visible un elemento.
          </li>
          <li class="chaptrSubSectUl__li"><code>top = true</code>: el elemento se alinea con la parte superior de la ventana.</li>
          <li class="chaptrSubSectUl__li"><code>top = false</code>: el elemento se alinea con la parte inferior.</li>
        </ul>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑myElement = document.querySelector('ÔºÉmainSection');
          ¬∑myElement.@scrollIntoView(true);</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Congelar el desplazamiento" codeText="">
        <p class="chaptrSubSect__p">Para deshabilitar el desplazamiento del documento</p>
        <pre class="chaptrSubSect__console wScript">
          document.body.¬∫style.¬∫overflow = 'hidden';</pre>
        <p class="chaptrSubSect__p">Para reanudar el desplazamiento del documento</p>
        <pre class="chaptrSubSect__console wScript">
          document.body.¬∫style.¬∫overflow = '';</pre>
      </ChaptrSubSect>
    </ChaptrSect>
    <ChaptrSect h3Title="Coordenadas" codeText="">
      <ChaptrSubSect h4Title="Sistema de coordenadas" codeText="">
        <p class="chaptrSubSect__p">Coordenadas relativas a la ventana (<code>clientX</code>/<code>clientY</code>)</p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li">Similares a <code>position:fixed</code>.</li>
          <li class="chaptrSubSectUl__li">Se miden desde la esquina superior izquierda de la ventana visible.</li>
          <li class="chaptrSubSectUl__li">Cambian cuando se desplaza la p√°gina, ya que el elemento "mueve su posici√≥n relativa a la ventana".</li>
        </ul>
        <p class="chaptrSubSect__p">Coordenadas relativas al documento (<code>pageX</code>/<code>pageY</code>)</p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li">Similares a <code>position:absolute</code> relativo a la ra√≠z del documento.</li>
          <li class="chaptrSubSectUl__li">Se miden desde la esquina superior izquierda del documento completo.</li>
          <li class="chaptrSubSectUl__li">Permanecen constantes, incluso si hay desplazamiento.</li>
        </ul>

      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Obteniendo coordenadas de elementos" codeText="">
        <p class="chaptrSubSect__p">El m√©todo <code>getBoundingClientRect()</code> devuelve las coordenadas del elemento relativas a la ventana en forma de un rect√°ngulo (<code>DOMRect</code>), con las siguientes propiedades principales</p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li"><code>x</code>, <code>y</code>: Coordenadas del borde superior izquierdo.</li>
          <li class="chaptrSubSectUl__li"><code>width</code>, <code>height</code>: Dimensiones del rect√°ngulo.</li>
          <li class="chaptrSubSectUl__li"><code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>: Coordenadas de los bordes del rect√°ngulo.</li>
        </ul>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑myEle = document.querySelector('/¬∫ chaptrSect__h3 ¬∫/');
          let ¬∑rect = ¬∑myElement.@getBoundingClientRect();
          console.log(¬∑rect.¬∫top);    ‚ãó /¬∫ -1806.09375 ¬∫/
          console.log(¬∑rect.¬∫left);   ‚ãó /¬∫ 106.09375 ¬∫/
          console.log(¬∑rect.¬∫width);    ‚ãó /¬∫ 732.8125 ¬∫/
          console.log(¬∑rect.¬∫height);   ‚ãó /¬∫ 33.84375 ¬∫/
        </pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Conversi√≥n coors.[window] ‚üπ coors.[document]" codeText="">
        <p class="chaptrSubSect__p">Se puede usar la f√≥rmula</p>
        <pre class="chaptrSubSect__console wScript">
          ¬∑pageY = ¬∑clientY + √ßwindow.¬∫pageYOffset;
          ¬∑pageX = ¬∑clientX + √ßwindow.¬∫pageXOffset;</pre>
        <p class="chaptrSubSect__p">Funci√≥n para obtener coordenadas absolutas (documento)</p>
        <pre class="chaptrSubSect__console wScript">
          const ¬∑myElem = document.querySelector('/¬∫ .chaptrSect__h3 ¬∫/');

          function @getCoords(‚Ä¢elem) &#123;
            let ¬∑box = ¬∑elem.@getBoundingClientRect();

            return &#123;
              top: ¬∑box.¬∫top + √ßwindow.¬∫pageYOffset,
              left: ¬∑box.¬∫left + √ßwindow.¬∫pageXOffset,
              bottom: ¬∑box.¬∫bottom + √ßwindow.¬∫pageYOffset,
              right: ¬∑box.¬∫right + √ßwindow.¬∫pageXOffset
            &#125;;
          &#125;;

          console.log(@getCoords(¬∑myElem));
          ‚ãó /¬∫ &#123;top: 293.90625, left: 106.09375, bottom: 327.75, right: 838.90625&#125; ¬∫/
        </pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Posici√≥n de elementos din√°micamente" codeText="">
        <p class="chaptrSubSect__p">Mostrar un mensaje debajo de un elemento (con posici√≥n fija)</p>
        <pre class="chaptrSubSect__console wScript">
          function @createMessageUnder(‚Ä¢elem, ‚Ä¢html) &#123;
            let ¬∑message = document.createElement('div');
            ¬∑message.¬∫style.¬∫cssText = '/¬∫ position:fixed; color: red ¬∫/';
            
            let ¬∑coords = ‚Ä¢elem.@getBoundingClientRect();
            ¬∑message.¬∫style.¬∫left = ¬∑coords.¬∫left + 'px';
            ¬∑message.¬∫style.¬∫top = ¬∑coords.¬∫bottom + 'px';
            ¬∑message.¬∫innerHTML = ‚Ä¢html;
          
            document.body.append(¬∑message);
            @setTimeout(() =&gt; ¬∑message.@remove(), ¬¨5000); 
            /* Eliminar mensaje despu√©s de 5s */
          &#125;
          
          let ¬∑elem = document.getElementById('miElemento');
          @createMessageUnder(¬∑elem, '/¬∫ ¬°Hola, mundo! ¬∫/');</pre>
        <p class="chaptrSubSect__p">Mensaje absoluto que permanece tras desplazamiento</p>
        <pre class="chaptrSubSect__console wScript">
          function @createMessageUnder(‚Ä¢elem, ‚Ä¢html) &#123;
            let ¬∑message = document.createElement('div');
            ¬∑message.¬∫style.¬∫cssText = '/¬∫ position:absolute; color: red ¬∫/';
          
            let ¬∑coords = @getCoords(‚Ä¢elem);
            ¬∑message.style.left = ¬∑coords.¬∫left + 'px';
            ¬∑message.style.top = ¬∑coords.¬∫bottom + 'px';
            ¬∑message.¬∫innerHTML = ‚Ä¢html;
          
            document.body.append(¬∑message);
            @setTimeout(() =&gt; ¬∑message.@remove(), ¬¨5000);
          &#125;</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Detectar elementos en un punto espec√≠fico" codeText="">
        <p class="chaptrSubSect__p">Usa <code>document.elementFromPoint(x, y)</code> para detectar el elemento m√°s profundo en las coordenadas de la ventana (<code>x</code>, <code>y</code>).</p>
        <pre class="chaptrSubSect__console wScript">
          let ¬∑centerX = document.√ßdocumentElement.¬∫clientWidth / 2;
          let ¬∑centerY = document.√ßdocumentElement.¬∫clientHeight / 2;
          
          let ¬∑elem = document.@elementFromPoint(¬∑centerX, ¬∑centerY);
          if (¬∑elem) &#123;
            ¬∑elem.¬∫style.¬∫background = 'red';
            console.log('Elemento en el centro:', ¬∑elem.¬∫tagName);
          &#125;;</pre>
        <p class="chaptrSubSect__p">Este m√©todo devuelve <code>null</code> si las coordenadas est√°n fuera de la ventana</p>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Propiedades JavaScript vs CSS" codeText="">
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li">En CSS, <code>right</code> y <code>bottom</code> son distancias desde el borde derecho e inferior, respectivamente.</li>
          <li class="chaptrSubSectUl__li">En JavaScript, <code>right</code> y <code>bottom</code> son coordenadas absolutas calculadas desde la esquina superior izquierda.</li>
        </ul>
      </ChaptrSubSect>
    </ChaptrSect>
  </LssnArt>
	<Footer slot="mainFooter" />
</MainLayout>

<!-- 
&lt;&gt;
()&#123;&#125;
ÔπõÔπú    Llaves no estiladas
Ôπï     2 puntos no estilizados
¬™m√©todos
‚Ä¢parametro
¬∑variable
#variable en Func/if/for
√ßObjetos
‚ãó ‚àûResultado
@funcion()
¬¨numbers
objProperty:
¬∫objProperty
/* comentario */
'/¬∫ modo texto quita span ¬∫/'
<p class="chaptrSubSect__p">
<pre class="chaptrSubSect__console wScript">
<table class="chaptrSubSect__table">
<ul class="chaptrSubSect__ul">
<li class="chaptrSubSectUl__li">
ÔºÉ
-->
