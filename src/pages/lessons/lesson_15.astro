---
import MainLayout from "@/layouts/MainLayout.astro"
import Footer from "@/components/Footer.astro"
import LssnArt from "@/components/LssnArt.astro"
import ChaptrSect from "@/components/ChaptrSect.astro"
import ChaptrSubSect from "@/components/ChaptrSubSect.astro"
---
<MainLayout>
  <LssnArt artClass="lssn__15" h2Title="Configuración de props" slot="mainContent">
    <ChaptrSect h3Title="Descriptores de propiedad" codeText="">
      <ChaptrSubSect h4Title="El método" codeText=".getOwnPropertyDescriptor">
        <p class="chaptrSubSect__p">Un descriptor de propiedad en JavaScript es un objeto que describe las características de una propiedad en un objeto. Estas características incluyen</p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li"><code>value</code>: El valor actual de la propiedad.</li>
          <li class="chaptrSubSectUl__li"><code>writable</code>: Si la propiedad puede ser modificada (<code>true</code> o <code>false</code>).</li>
          <li class="chaptrSubSectUl__li"><code>enumerable</code>: Si la propiedad aparecerá en las iteraciones.</li>
          <li class="chaptrSubSectUl__li"><code>configurable</code>: Si la propiedad puede ser eliminada o modificada en su descriptor.</li>
        </ul>
        <pre class="chaptrSubSect__console wScript">
          const çuser = &#123;
            name: 'Éder',
            age: ¬4
          &#125;;

          console.log(çObject.ªgetOwnPropertyDescriptor(çuser, 'name'));
          ⋗ /º &#123; º/
              /º value: 'Éder', º/
              /º writable: true, º/
              /º enumerable: true, º/
              /º configurable: true º/
          /º &#125; º/</pre>
      </ChaptrSubSect>
    </ChaptrSect>
    <ChaptrSect h3Title="Modificación de descriptores" codeText="">
      <ChaptrSubSect h4Title="El método" codeText=".defineProperty()">
        <p class="chaptrSubSect__p">Por defecto en esta manera de crear las propiedades (en vez de con la notacion del punto o la literal), los indicadores se establecen por defecto en <code>false</code></p>
        <pre class="chaptrSubSect__console wScript">
          /* Sintaxis */
          Object.ªdefineProperty(çobj, 'propName', #descript);

          /* Ejemplo */
          const çuser = &#123;&#125;;

          Object.ªdefineProperty(çuser, 'name', &#123; value: 'Éder' &#125;);

          console.log(Object.ªgetOwnPropertyDescriptor(çuser, 'name'));
          ⋗ /º &#123; º/
              /º value: 'Eder',  º/
              /º writable: false,  º/
              /º enumerable: false,  º/
              /º configurable: false º/
          /º &#125; º/</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="El método" codeText=".defineProperties()">
        <p class="chaptrSubSect__p">Con esto, podemos hacer que cada una de esas propiedades tenga un valor u otro</p>
        <pre class="chaptrSubSect__console wScript">
          const çuser = &#123; name: 'Éder' &#125;;

          Object.ªdefineProperties(çuser, &#123;
            name: &#123;
              writable: false,
              enumerable: true,
              configurable: false
            &#125;,
          &#125;);

          console.log(Object.ªgetOwnPropertyDescriptor(çuser, 'name'));
          ⋗ /º &#123; º/
              /º value: 'Eder',  º/
              /º writable: false,  º/
              /º enumerable: true,  º/
              /º configurable: false º/
          /º &#125; º/

          çuser.•name = 'IKer';         /*/º X Error writable: false º/*/</pre>
      </ChaptrSubSect>
    </ChaptrSect>
    <ChaptrSect h3Title="Obtener todos los descriptores" codeText="">
      <ChaptrSubSect h4Title="El método" codeText=".getOwnPropertyDescriptors()">
        <p class="chaptrSubSect__p">Para obtener todos los descriptores al mismo tiempo</p>
        <pre class="chaptrSubSect__console wScript">
          const çuser = &#123;&#125;;

          Object.ªdefineProperties(çuser, &#123;
            name: &#123;
              value: 'Éder',
              writable: true,
              enumerable: false,
              configurable: true
            &#125;,
            age: &#123;
              value: ¬5,
              writable: false,
              enumerable: true,
              configurable: false
            &#125;
          &#125;);

          Object.ªkeys(çuser);
          ⋗ /º [ 'age' ] º/        /*/º Solo las enumerables º/*/

          çuser.•name = 'IKer';         /*/º Acepta la modificacion º/*/</pre>
      </ChaptrSubSect>
    </ChaptrSect>
    <ChaptrSect h3Title="Sellando objetos globalmente" codeText="">
      <ChaptrSubSect h4Title="El método" codeText="preventExtensions()">
        <p class="chaptrSubSect__p">Impide añadir propiedades al objeto</p>
        <pre class="chaptrSubSect__console wScript">
          const çuser = &#123; name: 'Éder' &#125;;

          Object.ªpreventExtensions(çuser);

          çuser.•age = ¬5;

          console.log(çuser);
          ⋗ /º &#123; name: 'Éder' &#125; º/        /*/º No añade la propiedad º/*/</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="El método" codeText="seal()">
        <p class="chaptrSubSect__p">Impide añadir/eliminar propiedades al objeto y establece todas las propiedades a <code>configurable: false</code></p>
        <pre class="chaptrSubSect__console wScript">
          const çuser = &#123; name: 'Éder' &#125;;

          Object.ªseal(çuser);

          çuser.•age = ¬5;
          delete çuser.•name;
          
          console.log(çuser);
          ⋗ /º &#123; name: 'Éder' &#125; º/</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="El método" codeText="freeze()">
        <p class="chaptrSubSect__p">Impide añadir/eliminar/modificar propiedades al objeto y establece todas las propiedades a <code>configurable: false</code> y <code>writable: false</code></p>
        <pre class="chaptrSubSect__console wScript">
          const çuser = &#123; name: 'Éder' &#125;;

          Object.ªfreeze(çuser);

          çuser.•age = ¬5;                  /* Intenta añadir la propiedad */
          delete çuser.•name;               /* Intenta eliminar la propiedad */
          çuser.•name = 'IKer';             /* Intenta modificar la propiedad */

          console.log(çuser);
          ⋗ /º &#123; name: 'Éder' &#125; º/</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="El método" codeText="isExtensible()">
        <p class="chaptrSubSect__p">Devuelve <code>true</code>/<code>false</code> si esta permitido añadir propiedades</p>
        <pre class="chaptrSubSect__console wScript">
          const çuser = &#123; name: 'Éder' &#125;;

          Object.ªpreventExtensions(çuser);

          console.log(Object.ªisExtensible(çuser));
          ⋗ /º false º/</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="El método" codeText="isSealed()">
        <p class="chaptrSubSect__p">Devuelve <code>true</code>/<code>false</code> si esta <code>seal</code> (prohibido añadir/eliminar propiedades)</p>
        <pre class="chaptrSubSect__console wScript">
          const çuser = &#123; name: 'Éder' &#125;;

          Object.ªseal(çuser);

          console.log(Object.ªisSealed(çuser));
          ⋗ /º true º/</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="El método" codeText="isFrozen()">
        <p class="chaptrSubSect__p">Devuelve <code>true</code>/<code>false</code> si esta <code>freeze</code> (prohibido añadir/eliminar/modificar propiedades)</p>
        <pre class="chaptrSubSect__console wScript">
          const çuser = &#123; name: 'Éder' &#125;;

          Object.ªfreeze(çuser);

          console.log(Object.ªisFrozen(çuser));
          ⋗ /º true º/</pre>
      </ChaptrSubSect>
    </ChaptrSect>
    <ChaptrSect h3Title="Getters y Setters" codeText="">
      <ChaptrSubSect h4Title="Setters" codeText="">
        <p class="chaptrSubSect__p">En un objeto normal, podemos añadir de cualquier manera y tipo un valor a una propiedad existente</p>
        <pre class="chaptrSubSect__console wScript">
          const çuser = &#123;&#125;;

          çuser.•name = ¬300;

          console.log(çuser)
          ⋗ /º &#123; name: 300 &#125; º/</pre>
        <p class="chaptrSubSect__p">Con los Setters tenemos un mayor control sobre cómo se establecen y cambian los valores de las propiedades en un objeto. Por convención las propiedades privadas se nombran precedidas de un guión bajo <code>_propName</code></p>
        <pre class="chaptrSubSect__console wScript">
          const çuser = &#123;
            set •name(#newName)&#123;
              if(typeof #newName === 'string' && #newName.length &gt; ¬0)&#123;
                this._name = #newName;
                console.log('✔ Valor actualizado');
              &#125; else &#123;
                console.log('✘ Debe ser un string');
              &#125;
            &#125;
          &#125;;

          çuser.•name = ¬300;
          ⋗ /º ✘ Debe ser un string º/

          çuser.•name = 'Éder';
          ⋗ /º ✔ Valor actualizado º/

          console.log(çuser);
          ⋗ /º &#123; _name : 'Éder' &#125; º/</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Getters" codeText="">
        <p class="chaptrSubSect__p">Si ahora tratasemos de acceder a la propiedad <code>name</code> de la manera habitual, no obtendríamos el valor esperado.</p>
        <pre class="chaptrSubSect__console wScript">
          const çuser = &#123;
            set •name(#newName)&#123;
              if(typeof #newName === 'string' && #newName.length &gt; ¬0)&#123;
                this._name = #newName;
                console.log('✔ Valor actualizado');
              &#125; else &#123;
                console.log('✘ Debe ser un string');
              &#125;
            &#125;,
          &#125;;

          çuser.•name = 'Éder';
          ⋗ /º ✔ Valor actualizado º/

          console.log(çuser.•name);
          ⋗ /º undefined º/</pre>
        <p class="chaptrSubSect__p">Para solucionar esto, usamos los <code>Getters</code>. Cuando deseas obtener el valor de una propiedad de un objeto de una manera que parezca como si estuvieras accediendo directamente a una propiedad, pero puede estar involucrando lógica adicional si es necesario</p>
        <pre class="chaptrSubSect__console wScript">
          const çuser = &#123;
            set •name(#newName)&#123;
              if(typeof #newName === 'string' && #newName.length &gt; ¬0)&#123;
                this._name = #newName;
                console.log('✔ Valor actualizado');
              &#125; else &#123;
                console.log('✘ Debe ser un string');
              &#125;
            &#125;,

            get @name()&#123;
              return `El nombre es: &#123;this._name&#125;` ;
            &#125;
          &#125;;

          çuser.•name = 'Éder';
          ⋗ /º ✔ Valor actualizado º/

          console.log(çuser.•name);
          ⋗ /º "El nombre es : Éder" º/</pre>
      </ChaptrSubSect>
    </ChaptrSect>
  </LssnArt>
	<Footer slot="mainFooter" prevPage="/lessons/lesson_14" nextPage="/lessons/lesson_16"/>
</MainLayout>


<!-- 
&lt;&gt;
()&#123;&#125;
﹛﹜    Llaves no estiladas
﹕     2 puntos no estilizados
ªmétodos
•parametro
·variable
#variable en Func/if/for
çObjetos
⋗ ∞Resultado
@funcion()
¬numbers
objProperty:
ºobjProperty
/* comentario */
'/º modo texto quita span º/'
<p class="chaptrSubSect__p">
<pre class="chaptrSubSect__console wScript">
<table class="chaptrSubSect__table">
<ul class="chaptrSubSect__ul">
<li class="chaptrSubSectUl__li">
＃
-->
