---
import MainLayout from "@/layouts/MainLayout.astro"
import Footer from "@/components/Footer.astro"
import LssnArt from "@/components/LssnArt.astro"
import ChaptrSect from "@/components/ChaptrSect.astro"
import ChaptrSubSect from "@/components/ChaptrSubSect.astro"
---
<MainLayout>
  <LssnArt artClass="lssn__10" h2Title="Funciones" slot="mainContent">
    <ChaptrSect h3Title="Creación de funciones" codeText="">
      <ChaptrSubSect h4Title="Declaración de función" codeText="">
        <p class="chaptrSubSect__p">Para crear una función usamos una <mark>declaración</mark> de función. Es la <mark>recomendada</mark> por legibilidad y poder llamarlas antes de ser declaradas</p>
        <pre class="chaptrSubSect__console wScript">
          function @myFunction() &#123;
            console.log('/º Hola mundo! º/');
          &#125;
        
          @myFunction();
          ⋗ /º" Hola mundo!" º/</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Expresión de función" codeText="">
        <p class="chaptrSubSect__p">Asignar una función a una variable. Puede no tener un nombre (<strong>anónima</strong>) o tener un nombre para referencia interna. No son <mark>hoisted</mark>, esto significa que no se pueden invocar antes de que se definan</p>
        <pre class="chaptrSubSect__console wScript">
          let ·sayHi = @function() &#123;
            console.log('/º Hola mundo! º/');
          &#125;;

          @sayHi()
          ⋗ /º" Hola mundo!" º/</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Expresión de función" codeText="NFE">
        <p class="chaptrSubSect__p">Es una función que tiene nombre (Named Function Expression). Este nombre es local a la función y se puede utilizar dentro de la función para hacer referencia a sí misma, lo que es útil como en la recursión</p>
        <pre class="chaptrSubSect__console wScript">
          const ·contar = function @cuenta(#n) &#123;
            if(#n &gt; ¬0) &#123;
              console.log(#n);
              @cuenta(#n - ¬1);
              &#125; else &#123;
                console.log('/º Listo! º/');
                &#125;;
            &#125;;

            @contar(¬3)
            ⋗ 3
            ⋗ 2
            ⋗ 1 
            ⋗ /º"Listo!"º/</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Constructor de función" codeText="new">
        <p class="chaptrSubSect__p">Son nombradas con la primera palabra en <mark>mayúscula</mark> y sólo deben ejecutarse con el operador <code>new</code>. Se crea literalmente con un string y es pasada en tiempo de ejecución (dinámicamente)</p>
        <p class="chaptrSubSect__p">Hoy en día su uso es muy poco común y generalmente <mark>se desaconseja</mark>, debido a que puede hacer el código difícil de leer y mantener, además de que puede tener implicaciones de seguridad</p>
        <pre class="chaptrSubSect__console wScript">
          let ·suma = new @Function('a', 'b', '/º return a + b; º/');

          console.log(@suma(¬2, ¬3));
          ⋗ 5</pre>
      </ChaptrSubSect>
    </ChaptrSect>
    <ChaptrSect h3Title="Retornando valores" codeText="return">
      <ChaptrSubSect h4Title="Sintaxis" codeText="">
        <p class="chaptrSubSect__p">Una función con un <code>return</code> vacio o sin el, devuelve <code>undefined</code>. Si una función no devuelve un valor, es lo mismo que si devuelve <code>undefined</code></p>
        <pre class="chaptrSubSect__console wScript">
          function @suma(#param1, #param2) &#123;
            return #param1 + #param2;
          &#125;;
        
          let ·result = @suma(¬10, ¬40);
          console.log(·result);
          ⋗ 50</pre>
      </ChaptrSubSect>
    </ChaptrSect>
    <ChaptrSect h3Title="Parametros vs Argumentos" codeText="">
      <ChaptrSubSect h4Title="Parametros" codeText="">
        <p class="chaptrSubSect__p">Un <span class="bttn">parámetro</span> es una variable que <mark>se define en la declaración de una función</mark> entre paréntesis. Se utiliza para especificar los valores que se esperan como entrada en la función.</p>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Argumentos" codeText="">
        <p class="chaptrSubSect__p">Un <span class="bttn">argumento</span> es el valor real que se pasa a la función <mark>cuando se la invoca</mark>. Los argumentos se especifican entre paréntesis en la llamada a la función</p>
        <pre class="chaptrSubSect__console wScript">
          function @suma(#param1, #param2) &#123;
            return #param1 + #param2;
          &#125;;
        
          console.log(@suma(•argumento1, •argumento2);)</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="El objeto" codeText="arguments">
        <p class="chaptrSubSect__p">Es un objeto <strong>parecido a un array</strong> que se encuentra <strong>disponible dentro de </strong><mark>todas</mark><strong> las funciones no flecha</strong>, y que contiene todos los argumentos que se pasan a esa función. Es útil cuando no sabes cuántos argumentos se van a pasar a una función</p>
        <p class="chaptrSubSect__p">A quedado en deshuso por el parámetro más moderno <code>...rest</code></p>
        <pre class="chaptrSubSect__console wScript">
          function @calculations(#a, #b, #c) &#123;       /* o dinámicamente */
            let #operation = #arguments[¬0] + #arguments[¬2] - #arguments[¬1];
            console.log(#operation)
          &#125;;
        
          @calculations(¬5, ¬3, ¬6);
          ⋗ 8</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="El parámetro" codeText="..rest">
        <p class="chaptrSubSect__p">El parámetro <code>rest</code> nos permite representar un número indefinido de <mark>argumentos</mark> como un array</p>
        <pre class="chaptrSubSect__console wScript">
          function @printNumbers(...#numbers) &#123;
            console.log(#numbers)
            console.log(#numbers[¬0]);
            console.log(#numbers[¬2]);
          &#125;;
        
          @printNumbers(¬2, ¬4, ¬6, ¬8);
          ⋗ 2, 4, 6, 8
          ⋗ 2
          ⋗ 5</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Valores predeterminados" codeText="">
        <p class="chaptrSubSect__p">Si no se proporcionase un parámetro, su valor se conviertiría en <code>undefined</code>, de esta manera se puede pasar un valor por defecto</p>
        <pre class="chaptrSubSect__console wScript">
          function @showMessage(from, #text = 'Guest') &#123;
            console.log(`/º $&#123;from&#125;: $&#123;text&#125; º/`);
          &#125;;
        
          @showMessage('Eder', 'Member');
          ⋗ /º "Eder: Member" º/

          @showMessage('Iker');
          ⋗ /º "Iker: Guest" º/</pre>
      </ChaptrSubSect>
    </ChaptrSect>
    <ChaptrSect h3Title="Las funciones flecha" codeText="=>">
      <ChaptrSubSect h4Title="Explicación" codeText="">
        <p class="chaptrSubSect__p">Las funciones flecha <mark>no tienen</mark> <code>this</code></p>
        <p class="chaptrSubSect__p">Como no tienen <code>this</code> no pueden ejecutarse como constructores con <code>new</code></p>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Con argumentoss" codeText="">
        <p class="chaptrSubSect__p">Son <strong>siempre</strong> funciones <mark>anónimas</mark> y <mark>function expressions</mark>, porque no tienen nombre y <strong>se asignan a una variable</strong></p>
        <pre class="chaptrSubSect__console wScript">
          const ·sum = (#a, #b) =&gt; &#123;
            return #a + #b;
          &#125;;

          console.log(@sum(¬5, ¬4));
          ⋗ 9</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Con argumentos SIN" codeText="&#123; return &#125;">
        <p class="chaptrSubSect__p">Si la función tiene solo una expresión, puedes omitir las llaves <code>&#123;&#125;</code> y la palabra clave <code>return</code></p>
        <pre class="chaptrSubSect__console wScript">
          const ·sum = (#a, #b) =&gt; #a + #b;

          console.log(@sum(¬5, ¬4));
          ⋗ 9</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Un argumento SIN" codeText="()&#123; return &#125;">
        <p class="chaptrSubSect__p">Si solo hay un parámetro, los paréntesis pueden omitirse, aunque <mark style="white-space: nowrap;">no es recomendable</mark> por legibilidad</p>
        <pre class="chaptrSubSect__console wScript">
          const ·cuadrado = #x =&gt; #x * #x;

          console.log(@cuadrado(¬4));
          ⋗ 16</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Sin argumentos SIN" codeText="&#123; return &#125;">
        <p class="chaptrSubSect__p">Si no hay parámetros <mark style="white-space: nowrap;">deben usarse siempre</mark> los paréntesis</p>
        <pre class="chaptrSubSect__console wScript">
          const ·sayHi = () =&gt; console.log('/º Hello world! º/');

          console.log(@sayHi());
          ⋗ /º"Hello world!"º/</pre>
      </ChaptrSubSect>
    </ChaptrSect>
  </LssnArt>
	<Footer slot="mainFooter" prevPage="/lessons/lesson_09" nextPage="/lessons/lesson_11"/>
</MainLayout>



<!-- 
&lt;&gt;
&#123;&#125;
()&#123;&#125;
﹛﹜    Llaves no estiladas
﹕     2 puntos no estilizados
•parametro
·variable
#variable en Func/if/for
çObjetos
⋗ ∞Resultado
@funcion()
¬numbers
objProperty:
ºobjProperty
/* comentario */
'/º modo texto quita span º/'
<p class="chaptrSubSect__p">
<pre class="chaptrSubSect__console wScript">
<table class="chaptrSubSect__table">
<img class="chaptrSubSect__img" src=`${ruta}img13.webp` alt="captura del evento">
<ul class="chaptrSubSect__ul">
<li class="chaptrSubSectUl__li"></li>
＃
-->