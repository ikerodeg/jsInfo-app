---
import MainLayout from "@/layouts/MainLayout.astro"
import Footer from "@/components/Footer.astro"
import LssnArt from "@/components/LssnArt.astro"
import ChaptrSect from "@/components/ChaptrSect.astro"
import ChaptrSubSect from "@/components/ChaptrSubSect.astro"
---
<MainLayout>
  <LssnArt artClass="lssn__20" h2Title="WeakSet" slot="mainContent">
    <ChaptrSect h3Title="Creación de un Set" codeText="">
      <ChaptrSubSect h4Title="Utilizando su constructor" codeText="new Set()">
        <p class="chaptrSubSect__p">Sólo podemos agregar <mark>objetos</mark> cómo elementos</p>
        <ul class="chaptrSubSect__ul">
          <li class="chaptrSubSectUl__li"><strong>Valores únicos</strong>: No puede contener valores duplicados. Si intentas agregar el mismo valor más de una vez, lo ignorará.</li>
          <li class="chaptrSubSectUl__li"><strong>Referencias débiles</strong>: El recolector de basura lo eliminará si el objeto es borrado en otro lugar y no es accesible.</li>
          <li class="chaptrSubSectUl__li"><strong>No</strong> permite iteración sobre él.</li>
          <li class="chaptrSubSectUl__li"><strong>No</strong> tiene el método <code>size</code>.</li>
          <li class="chaptrSubSectUl__li"><strong>No</strong> se pueden añadir objetos cuando se crea el literal, puesto que los objetos tienen que estar antes referenciados en una variable.</li>
        </ul>
        <pre class="chaptrSubSect__console wScript">
          const ·firstTeam = new @WeakSet();

          console.log(·firstTeam);          ⋗ /º WeakSet &#123;&#125; º/</pre>
      </ChaptrSubSect>
    </ChaptrSect>
    <ChaptrSect h3Title="Agregar elementos" codeText="">
      <ChaptrSubSect h4Title="Utilizando el método" codeText=".add()">
        <p class="chaptrSubSect__p">Cómo argumento le pasaremos valores</p>
        <pre class="chaptrSubSect__console wScript">
          const ·player1 = &#123;name: 'Éder'&#125;;
          const ·player2 = &#123;name: 'Iker'&#125;;
          const ·player3 = &#123;name: 'Bego'&#125;;

          const ·firstTeam = new @WeakSet();

          ·firstTeam.add(·player1);
          ·firstTeam.add(·player2);
          ·firstTeam.add(·player3);

          console.log(·firstTeam);
          ⋗ /º WeakSet &#123;&#123;...&#125;, &#123;...&#125;, &#123;...&#125;&#125; º/</pre>
        <p class="chaptrSubSect__p">Podemos usar el encadenamiento para añadir varios valores a la vez</p>
        <pre class="chaptrSubSect__console wScript">
          const ·player1 = &#123;name: 'Éder'&#125;;
          const ·player2 = &#123;name: 'Iker'&#125;;
          const ·player3 = &#123;name: 'Bego'&#125;;

          const ·firstTeam = new @WeakSet();

          ·firstTeam
            .add(·player1)
            .add(·player2)
            .add(·player3);

          console.log(·firstTeam);
          ⋗ /º WeakSet &#123;&#123;...&#125;, &#123;...&#125;, &#123;...&#125;&#125; º/</pre>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Array como argumento a" codeText="new WeakSet()">
        <p class="chaptrSubSect__p">Podemos pasar un array de objetos al constructor <code>new WeakSet()</code></p>
        <pre class="chaptrSubSect__console wScript">
          const ·player1 = &#123;name: 'Éder'&#125;;
          const ·player2 = &#123;name: 'Iker'&#125;;
          const ·player3 = &#123;name: 'Bego'&#125;;

          const ·firstTeam = new @WeakSet([·player1, ·player2, ·player3]);

          console.log(·firstTeam);
          ⋗ /º WeakSet &#123;&#123;...&#125;, &#123;...&#125;, &#123;...&#125;&#125; º/</pre>
      </ChaptrSubSect>
    </ChaptrSect>
    <ChaptrSect h3Title="Existencia valores" codeText="">
      <ChaptrSubSect h4Title="Verifica si existe un elemento con" codeText=".has()">
        <p class="chaptrSubSect__p">Devuelve un booleano</p>
        <pre class="chaptrSubSect__console wScript">
          const ·player1 = &#123;name: 'Éder'&#125;;
          const ·player2 = &#123;name: 'Iker'&#125;;
          const ·player3 = &#123;name: 'Bego'&#125;;

          const ·firstTeam = new @WeakSet([·player1, ·player2, ·player3]);

          console.log(·firstTeam.has(·player2));        ⋗ /º true º/
          console.log(·firstTeam.has(·player4));        ⋗ /º false º/</pre>
      </ChaptrSubSect>
    </ChaptrSect>
    <ChaptrSect h3Title="Eliminar elementos" codeText="">
      <ChaptrSubSect h4Title="Elimina elemento con" codeText=".delete()">
        <p class="chaptrSubSect__p">Devuelve <code>true</code> si el valor existía y fue eliminado, o <code>false</code> si el valor no estaba</p>
        <pre class="chaptrSubSect__console wScript">
          const ·player1 = &#123;name: 'Éder'&#125;;
          const ·player2 = &#123;name: 'Iker'&#125;;
          const ·player3 = &#123;name: 'Bego'&#125;;

          const ·firstTeam = new @WeakSet([·player1, ·player2, ·player3]);

          console.log(·firstTeam.ªdelete(·player2));     ⋗ /º true º/
          console.log(·firstTeam.ªdelete(·player4));     ⋗ /º false º/

          console.log(·firstTeam);
          ⋗ /º WeakSet &#123;&#123;...&#125;, &#123;...&#125;&#125; º/</pre>
      </ChaptrSubSect>
    </ChaptrSect>
  </LssnArt>
	<Footer slot="mainFooter" prevPage="/lessons/lesson_19" nextPage="/lessons/lesson_21"/>
</MainLayout>


<!-- 
&lt;&gt;
()&#123;&#125;
﹛﹜    Llaves no estiladas
﹕     2 puntos no estilizados
ªmétodos
•parametro
·variable
#variable en Func/if/for
çObjetos
⋗ ∞Resultado
@funcion()
¬numbers
objProperty:
ºobjProperty
/* comentario */
'/º modo texto quita span º/'
<p class="chaptrSubSect__p">
<pre class="chaptrSubSect__console wScript">
<table class="chaptrSubSect__table">
<ul class="chaptrSubSect__ul">
<li class="chaptrSubSectUl__li">
＃
-->
