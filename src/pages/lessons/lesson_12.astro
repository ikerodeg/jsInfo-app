---
import MainLayout from "@/layouts/MainLayout.astro"
import Footer from "@/components/Footer.astro"
import LssnArt from "@/components/LssnArt.astro"
import ChaptrSect from "@/components/ChaptrSect.astro"
import ChaptrSubSect from "@/components/ChaptrSubSect.astro"
---
<MainLayout>
  <LssnArt artClass="lssn__12" h2Title="Array-Like" slot="mainContent">
    <ChaptrSect h3Title="La propiedad clave" codeText="Symbol.iterator">
      <ChaptrSubSect h4Title="Qué es un iterable" codeText="">
        <p class="chaptrSubSect__p">Un iterable es un objeto que define un método llamado <code>Symbol.iterator</code>. Este método devuelve un iterador, un objeto que sabe cómo acceder a una colección de elementos uno a uno</p>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Qué es" codeText="Symbol.iterator">
        <p class="chaptrSubSect__p">Es un símbolo predefinido que representa el <mark>método</mark> predeterminado para iterar sobre un objeto. Este método debe devolver un iterador que implemente el protocolo de iteradores de JavaScript</p>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Cómo funciona" codeText="">
        <p class="chaptrSubSect__p">Cuando intentas usar un bucle <code>for...of</code> en un objeto, el mecanismo de iteración llama automáticamente al método <code>Symbol.iterator</code> del objeto</p>
        <p class="chaptrSubSect__p">Un iterador tiene un método llamado <code>next()</code> que devuelve un objeto con dos propiedades: <code>value</code>(el valor actual) y <code>done</code>(un booleano que indica si la iteración ha terminado (true) o no (false).)</p>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="Creación de un objeto iterador" codeText="">
        <p class="chaptrSubSect__p">Cuando intentas usar un bucle <code>for...of</code> en un objeto, el mecanismo de iteración llama automáticamente al método <code>Symbol.iterator</code> del objeto</p>
        <pre class="chaptrSubSect__console wScript">
          let ·rango = &#123;
            from: ¬1,
            to: ¬5
          &#125;;

          for (let #num of ·rango) &#123;
            console.log(#num);
          &#125;;
        
          ⋗ rango is not iterable</pre>
        <p class="chaptrSubSect__p">Para hacer que el objeto <code>rango</code> sea iterable (y así permitir que <code>for..of</code> funcione) necesitamos agregarle el método llamado <code>Symbol.iterator</code> (un símbolo incorporado especial usado solo para realizar esa función)</p>
        <pre class="chaptrSubSect__console wScript">
          let ·rango = &#123;
            from: ¬1,
            to: ¬5,

            /*/º Definimos el método Symbol.iterator º/*/
            [çSymbol.•iterator]() &#123;
              return &#123;
                current: this.from,
                last: this.•to,

                /*/º Definimos el método next() del iterador º/*/
                @next() &#123;
                  if (this.•current &lt;= this.•last) &#123;
                    return &#123; done: false, value: this.•current++ &#125;;
                  &#125; else &#123;
                    return &#123; done: true &#125;;
                  &#125;
                &#125;
              &#125;;
            &#125;
          &#125;;

          /*/º ¡Ahora sí funciona múltiples veces! º/*/
          for (let #num of ·rango) console.log(#num);
          ⋗ 1 2 3 4 5
          for (let #num of ·rango) console.log(#num);
          ⋗ 1 2 3 4 5 /*/º ← ¡Funciona de nuevo! º/*/</pre>
      </ChaptrSubSect>
    </ChaptrSect>
    <ChaptrSect h3Title="Iterables y " codeText="array-like">
      <ChaptrSubSect h4Title="Iterables" codeText="">
        <p class="chaptrSubSect__p">Son objetos que implementan el método <code>Symbol.iterator</code></p>
        <p class="chaptrSubSect__p">Puede ser recorrido por <code>for...of</code></p>
        <p class="chaptrSubSect__p">Arrays, strings, Maps, Sets, NodeLists, etc.</p>
      </ChaptrSubSect>
      <ChaptrSubSect h4Title="" codeText="array-like">
        <p class="chaptrSubSect__p">Un objeto es "array-like" si tiene propiedades indexadas numéricamente (0, 1, 2, etc.) y una propiedad <code>length</code>, pero no necesariamente implementa <code>Symbol.iterator</code></p>
        <p class="chaptrSubSect__p">No puede ser recorrido por <code>for...of</code> (a menos que implemente <code>Symbol.iterator</code>)</p>
        <p class="chaptrSubSect__p">Tienen una estructura similar a un array, pero <mark><b>NO</b></mark> tienen los métodos de <code>Array.prototype</code></p>
      </ChaptrSubSect>
    </ChaptrSect>
    <ChaptrSect h3Title="Conversión a array" codeText="">
      <ChaptrSubSect h4Title="Usando" codeText="Array.from()">
        <p class="chaptrSubSect__p">A un <code>NodeList</code> no se puede aplicar métodos de array directamente, por eso lo convertimos con <code>Array.from()</code></p>
        <pre class="chaptrSubSect__console wScript">
          /*/º NodeList es un objeto array-like e iterable º/*/
          const ·liElements = document.querySelectorAll('li');  /*/º NodeList (iterable y array-like) º/*/
          ·liElements.@map(·el =&gt; console.log(·el));          /*/º Error : .map is not a function º/*/

          const ·liArray = Array.from(·liElements);        /* Convertimos a array */
          ·liArray.@map(·el =&gt; console.log(·el));             /*/º Ahora sí funciona º/*/</pre>
        <p class="chaptrSubSect__p">Lo mismo pasa con <code>Array-Like</code></p>
        <pre class="chaptrSubSect__console wScript">
          /*/º Array-Like º/*/
          const ·arrayLike = &#123;
            0: 'a',
            1: 'b',
            2: 'c',
            length: ¬3
          &#125;;

          const ·arrayFromArrayLike = Array.from(·arrayLike);   /*/º Convertimos a array º/*/
          ·arrayFromArrayLike.@map(·el =&gt; console.log(·el));    /*/º Ahora sí funciona º/*/</pre>
      </ChaptrSubSect>
    </ChaptrSect>
  </LssnArt>
	<Footer slot="mainFooter" prevPage="/lessons/lesson_12" nextPage="/lessons/lesson_13"/>
</MainLayout>

<!-- 
&lt;&gt;
&#123;&#125;
()&#123;&#125;
﹛﹜    Llaves no estiladas
﹕     2 puntos no estilizados
•parametro
·variable
#variable en Func/if/for
çObjetos
⋗ ∞Resultado
@funcion()
¬numbers
objProperty:
ºobjProperty
/* comentario */
'/º modo texto quita span º/'
<p class="chaptrSubSect__p">
<pre class="chaptrSubSect__console wScript">
<table class="chaptrSubSect__table">
<img class="chaptrSubSect__img" src=`${ruta}img13.webp` alt="captura del evento">
<ul class="chaptrSubSect__ul">
<li class="chaptrSubSectUl__li"></li>
＃
-->